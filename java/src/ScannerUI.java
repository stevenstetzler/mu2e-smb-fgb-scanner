/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import javax.imageio.ImageIO;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.CvException;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfKeyPoint;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Scalar;
import org.opencv.features2d.FeatureDetector;
import org.opencv.features2d.DescriptorExtractor;
import org.opencv.features2d.FlannBasedMatcher;
import org.opencv.imgproc.Imgproc;
import static org.opencv.imgcodecs.Imgcodecs.*;
import resources.DirectoryWatchService;
import resources.SimpleDirectoryWatchService;

/**
 *
 * @author Steven
 */
public class ScannerUI extends javax.swing.JFrame {

    File mainDirectory;
    File imageDirectory;
    File configDirectory;
    File measurementDirectory;
    File measurementFile;
    File configurationFile;
    File configurationRectFile;
    File barDirectory;
    File barHoleDirectory;
    
    FileListener imageListener;
    
    StringBuilder debugText;
    
    boolean startup;
    boolean print_measurement_error = false;
    boolean bar_numbers_not_entered = false;
    static boolean FGB, SMB, selectedDirectory, selectedFile;
    ArrayList<JPanel> customizePanels;
    Set<String> imageDirectoryContents;
    //ArrayList<Rect> largeImageCropRects;
    
    ArrayList<Rect> configurationRectsList;
    Mat fullImage;
    Mat configImage;
    Mat configLeft;
    Mat configRight;
    
    int PPI = 2400;
    int configSelect = 0;
    int[][] dragParameters = new int[12][4];
    int scrollScalingFactor = 5;
    String typeOfBar;
    
    Map<Integer,Integer> barNumbers;
    Map<Integer,Rect> largeImageCropRects;
    Map<Integer,Rect> configurationRects;
    Map<Integer,Setting> configurationSettings;
    Map<Integer,Mat> configurationImages;
    Map<Integer,JLabel> configurationLabels;
    Map<Integer,JTextField> barNumberTextFields;
    
    java.util.Timer fileWatcherTimer;
        
    /**
     * Creates new form ScannerUI
     */
              

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectBarType = new javax.swing.ButtonGroup();
        configurationPanel = new javax.swing.JFrame();
        cannyEdgeParameters = new javax.swing.JPanel();
        tuneCannyHighThresh = new javax.swing.JSlider();
        tuneCannyLowThresh = new javax.swing.JSlider();
        tuneCannyLowThreshValue = new javax.swing.JLabel();
        tuneCannyHighThreshValue = new javax.swing.JLabel();
        circleDetectionParameters = new javax.swing.JPanel();
        centerDistance = new javax.swing.JSlider();
        minRadius = new javax.swing.JSlider();
        maxRadius = new javax.swing.JSlider();
        centerThresh = new javax.swing.JSlider();
        centerDistanceValue = new javax.swing.JLabel();
        centerThreshValue = new javax.swing.JLabel();
        minRadiusValue = new javax.swing.JLabel();
        maxRadiusValue = new javax.swing.JLabel();
        previewPanel = new javax.swing.JPanel();
        previewImage = new javax.swing.JLabel();
        overlayCircleCheckBox = new javax.swing.JCheckBox();
        edgeDetectionParameters = new javax.swing.JPanel();
        gaussianKernalSize = new javax.swing.JSlider();
        gaussianKernalSizeValue = new javax.swing.JLabel();
        gaussianSigmaX = new javax.swing.JSlider();
        gaussianSigmaXValue = new javax.swing.JLabel();
        gaussianSigmaY = new javax.swing.JSlider();
        gaussianSigmaYValue = new javax.swing.JLabel();
        buttonCancel = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        showOriginalImageCheckBox = new javax.swing.JCheckBox();
        overlayRectangleCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        selectSMB = new javax.swing.JRadioButton();
        selectFGB = new javax.swing.JRadioButton();
        selectDirectoryButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        currDirText = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        currConfigPictureText = new javax.swing.JLabel();
        selectConfigPicButton = new javax.swing.JButton();
        measureNewImageButton = new javax.swing.JButton();
        fillNumbersButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        leftText = new javax.swing.JLabel();
        L0Image = new javax.swing.JLabel();
        L1Image = new javax.swing.JLabel();
        L2Image = new javax.swing.JLabel();
        L3Image = new javax.swing.JLabel();
        L4Image = new javax.swing.JLabel();
        L5Image = new javax.swing.JLabel();
        rightText = new javax.swing.JLabel();
        R0Image = new javax.swing.JLabel();
        R1Image = new javax.swing.JLabel();
        R2Image = new javax.swing.JLabel();
        R3Image = new javax.swing.JLabel();
        R4Image = new javax.swing.JLabel();
        R5Image = new javax.swing.JLabel();
        saveConfigurationButton = new javax.swing.JButton();
        saveConfigurationImagesButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        Left1 = new javax.swing.JTextField();
        Left2 = new javax.swing.JTextField();
        Left3 = new javax.swing.JTextField();
        Left4 = new javax.swing.JTextField();
        Left5 = new javax.swing.JTextField();
        Left6 = new javax.swing.JTextField();
        Left7 = new javax.swing.JTextField();
        Left8 = new javax.swing.JTextField();
        Left9 = new javax.swing.JTextField();
        Left10 = new javax.swing.JTextField();
        Left11 = new javax.swing.JTextField();
        Right1 = new javax.swing.JTextField();
        Right2 = new javax.swing.JTextField();
        Right3 = new javax.swing.JTextField();
        Right4 = new javax.swing.JTextField();
        Right5 = new javax.swing.JTextField();
        Right6 = new javax.swing.JTextField();
        Right7 = new javax.swing.JTextField();
        Right8 = new javax.swing.JTextField();
        Right9 = new javax.swing.JTextField();
        Right10 = new javax.swing.JTextField();
        Right11 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        debugLogTextArea = new javax.swing.JTextArea();
        PPITextField = new javax.swing.JTextField();

        configurationPanel.setMinimumSize(new java.awt.Dimension(400, 300));

        cannyEdgeParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("Canny Threshold Parameters"));

        tuneCannyHighThresh.setMaximum(500);
        tuneCannyHighThresh.setValue(20);
        tuneCannyHighThresh.setBorder(javax.swing.BorderFactory.createTitledBorder("High Threshold"));
        tuneCannyHighThresh.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tuneCannyHighThreshStateChanged(evt);
            }
        });

        tuneCannyLowThresh.setMaximum(500);
        tuneCannyLowThresh.setBorder(javax.swing.BorderFactory.createTitledBorder("Low Threshold"));
        tuneCannyLowThresh.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tuneCannyLowThreshStateChanged(evt);
            }
        });

        tuneCannyLowThreshValue.setText("Low Val");

        tuneCannyHighThreshValue.setText("High Val");

        javax.swing.GroupLayout cannyEdgeParametersLayout = new javax.swing.GroupLayout(cannyEdgeParameters);
        cannyEdgeParameters.setLayout(cannyEdgeParametersLayout);
        cannyEdgeParametersLayout.setHorizontalGroup(
            cannyEdgeParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cannyEdgeParametersLayout.createSequentialGroup()
                .addComponent(tuneCannyHighThresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tuneCannyHighThreshValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(cannyEdgeParametersLayout.createSequentialGroup()
                .addComponent(tuneCannyLowThresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tuneCannyLowThreshValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cannyEdgeParametersLayout.setVerticalGroup(
            cannyEdgeParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cannyEdgeParametersLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(cannyEdgeParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tuneCannyLowThreshValue, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tuneCannyLowThresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cannyEdgeParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tuneCannyHighThresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tuneCannyHighThreshValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        circleDetectionParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("Circle Detection Paramters"));

        centerDistance.setValue(5);
        centerDistance.setBorder(javax.swing.BorderFactory.createTitledBorder("Distance Between Centers"));
        centerDistance.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                centerDistanceStateChanged(evt);
            }
        });

        minRadius.setMaximum(300);
        minRadius.setValue(70);
        minRadius.setBorder(javax.swing.BorderFactory.createTitledBorder("Minimum Circle Radius"));
        minRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minRadiusStateChanged(evt);
            }
        });

        maxRadius.setMaximum(300);
        maxRadius.setValue(80);
        maxRadius.setBorder(javax.swing.BorderFactory.createTitledBorder("Maximum Circle Radius"));
        maxRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxRadiusStateChanged(evt);
            }
        });

        centerThresh.setMaximum(200);
        centerThresh.setValue(40);
        centerThresh.setBorder(javax.swing.BorderFactory.createTitledBorder("Center Threshold"));
        centerThresh.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                centerThreshStateChanged(evt);
            }
        });

        centerDistanceValue.setText("Cent Dist");

        centerThreshValue.setText("Cent Thresh");

        minRadiusValue.setText("Min Radius");

        maxRadiusValue.setText("Max Radius");

        javax.swing.GroupLayout circleDetectionParametersLayout = new javax.swing.GroupLayout(circleDetectionParameters);
        circleDetectionParameters.setLayout(circleDetectionParametersLayout);
        circleDetectionParametersLayout.setHorizontalGroup(
            circleDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(circleDetectionParametersLayout.createSequentialGroup()
                .addComponent(maxRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxRadiusValue))
            .addGroup(circleDetectionParametersLayout.createSequentialGroup()
                .addComponent(centerDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(centerDistanceValue))
            .addGroup(circleDetectionParametersLayout.createSequentialGroup()
                .addComponent(centerThresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(centerThreshValue, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(circleDetectionParametersLayout.createSequentialGroup()
                .addComponent(minRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minRadiusValue))
        );
        circleDetectionParametersLayout.setVerticalGroup(
            circleDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(circleDetectionParametersLayout.createSequentialGroup()
                .addGroup(circleDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(centerDistanceValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(centerDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(circleDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(centerThreshValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(centerThresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(circleDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(minRadiusValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minRadius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(circleDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxRadiusValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(maxRadius, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        previewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));
        previewPanel.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout previewPanelLayout = new javax.swing.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previewImage, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addContainerGap())
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewPanelLayout.createSequentialGroup()
                .addComponent(previewImage, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addContainerGap())
        );

        overlayCircleCheckBox.setText("Overlay Circle");
        overlayCircleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overlayCircleCheckBoxActionPerformed(evt);
            }
        });

        edgeDetectionParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("Edge Detection Parameters"));

        gaussianKernalSize.setMajorTickSpacing(2);
        gaussianKernalSize.setMaximum(21);
        gaussianKernalSize.setMinimum(1);
        gaussianKernalSize.setMinorTickSpacing(2);
        gaussianKernalSize.setBorder(javax.swing.BorderFactory.createTitledBorder("Kernal Size"));
        gaussianKernalSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gaussianKernalSizeStateChanged(evt);
            }
        });

        gaussianKernalSizeValue.setText("Kernal Size");

        gaussianSigmaX.setMaximum(5);
        gaussianSigmaX.setValue(1);
        gaussianSigmaX.setBorder(javax.swing.BorderFactory.createTitledBorder("Sigma X"));
        gaussianSigmaX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gaussianSigmaXStateChanged(evt);
            }
        });

        gaussianSigmaXValue.setText("Sigma X");

        gaussianSigmaY.setMaximum(5);
        gaussianSigmaY.setValue(1);
        gaussianSigmaY.setBorder(javax.swing.BorderFactory.createTitledBorder("Sigma Y"));
        gaussianSigmaY.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gaussianSigmaYStateChanged(evt);
            }
        });

        gaussianSigmaYValue.setText("Sigma Y");

        javax.swing.GroupLayout edgeDetectionParametersLayout = new javax.swing.GroupLayout(edgeDetectionParameters);
        edgeDetectionParameters.setLayout(edgeDetectionParametersLayout);
        edgeDetectionParametersLayout.setHorizontalGroup(
            edgeDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(edgeDetectionParametersLayout.createSequentialGroup()
                .addGroup(edgeDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gaussianSigmaY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gaussianKernalSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gaussianSigmaX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(edgeDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gaussianKernalSizeValue, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                    .addComponent(gaussianSigmaXValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gaussianSigmaYValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        edgeDetectionParametersLayout.setVerticalGroup(
            edgeDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(edgeDetectionParametersLayout.createSequentialGroup()
                .addGroup(edgeDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(gaussianKernalSize, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gaussianKernalSizeValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(edgeDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(gaussianSigmaXValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gaussianSigmaX, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(edgeDetectionParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(gaussianSigmaY, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gaussianSigmaYValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        showOriginalImageCheckBox.setText("Show Originial Image");
        showOriginalImageCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showOriginalImageCheckBoxActionPerformed(evt);
            }
        });

        overlayRectangleCheckBox.setText("Overlay Rectangle");
        overlayRectangleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overlayRectangleCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configurationPanelLayout = new javax.swing.GroupLayout(configurationPanel.getContentPane());
        configurationPanel.getContentPane().setLayout(configurationPanelLayout);
        configurationPanelLayout.setHorizontalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPanelLayout.createSequentialGroup()
                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(configurationPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(circleDetectionParameters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cannyEdgeParameters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edgeDetectionParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(overlayCircleCheckBox)
                            .addComponent(showOriginalImageCheckBox)
                            .addComponent(overlayRectangleCheckBox)))
                    .addGroup(configurationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonSave)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        configurationPanelLayout.setVerticalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(configurationPanelLayout.createSequentialGroup()
                        .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, configurationPanelLayout.createSequentialGroup()
                                .addComponent(edgeDetectionParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(overlayCircleCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(overlayRectangleCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(showOriginalImageCheckBox))
                            .addGroup(configurationPanelLayout.createSequentialGroup()
                                .addComponent(cannyEdgeParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(circleDetectionParameters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(configurationPanelLayout.createSequentialGroup()
                        .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonCancel)
                            .addComponent(buttonSave))
                        .addGap(0, 11, Short.MAX_VALUE))))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Measure Fiber Guide Bars and SiPM Mounting Blocks"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        selectBarType.add(selectSMB);
        selectSMB.setText("SiPM Mounting Block");
        selectSMB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSMBActionPerformed(evt);
            }
        });

        selectBarType.add(selectFGB);
        selectFGB.setText("Fiber Guide Bar");
        selectFGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFGBActionPerformed(evt);
            }
        });

        selectDirectoryButton.setText("Select Directory");
        selectDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDirectoryButtonActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        jLabel1.setText("Current Directory:");

        jLabel3.setText("Config Picture:");

        currConfigPictureText.setText(" ");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currConfigPictureText, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(currDirText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currDirText, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currConfigPictureText, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        selectConfigPicButton.setText("Select Config Pic");
        selectConfigPicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectConfigPicButtonActionPerformed(evt);
            }
        });

        measureNewImageButton.setText("Measure New Image");
        measureNewImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                measureNewImageButtonActionPerformed(evt);
            }
        });

        fillNumbersButton.setText("Fill Numbers");
        fillNumbersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillNumbersButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(selectFGB)
                        .addGap(18, 18, 18)
                        .addComponent(selectSMB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectDirectoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectConfigPicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(measureNewImageButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fillNumbersButton)
                        .addGap(95, 95, 95))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectSMB)
                    .addComponent(selectFGB)
                    .addComponent(selectDirectoryButton)
                    .addComponent(selectConfigPicButton)
                    .addComponent(measureNewImageButton)
                    .addComponent(fillNumbersButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview and Configuration"));

        leftText.setText("Left Image:");

        L0Image.setText("No Image");
        L0Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                L0ImageMouseDragged(evt);
            }
        });
        L0Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                L0ImageMouseWheelMoved(evt);
            }
        });
        L0Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                L0ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                L0ImageMousePressed(evt);
            }
        });

        L1Image.setText("No Image");
        L1Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                L1ImageMouseDragged(evt);
            }
        });
        L1Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                L1ImageMouseWheelMoved(evt);
            }
        });
        L1Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                L1ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                L1ImageMousePressed(evt);
            }
        });

        L2Image.setText("No Image");
        L2Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                L2ImageMouseDragged(evt);
            }
        });
        L2Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                L2ImageMouseWheelMoved(evt);
            }
        });
        L2Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                L2ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                L2ImageMousePressed(evt);
            }
        });

        L3Image.setText("No Image");
        L3Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                L3ImageMouseDragged(evt);
            }
        });
        L3Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                L3ImageMouseWheelMoved(evt);
            }
        });
        L3Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                L3ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                L3ImageMousePressed(evt);
            }
        });

        L4Image.setText("No Image");
        L4Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                L4ImageMouseDragged(evt);
            }
        });
        L4Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                L4ImageMouseWheelMoved(evt);
            }
        });
        L4Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                L4ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                L4ImageMousePressed(evt);
            }
        });

        L5Image.setText("No Image");
        L5Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                L5ImageMouseDragged(evt);
            }
        });
        L5Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                L5ImageMouseWheelMoved(evt);
            }
        });
        L5Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                L5ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                L5ImageMousePressed(evt);
            }
        });

        rightText.setText("Right Image:");

        R0Image.setText("No Image");
        R0Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                R0ImageMouseDragged(evt);
            }
        });
        R0Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                R0ImageMouseWheelMoved(evt);
            }
        });
        R0Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                R0ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                R0ImageMousePressed(evt);
            }
        });

        R1Image.setText("No Image");
        R1Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                R1ImageMouseDragged(evt);
            }
        });
        R1Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                R1ImageMouseWheelMoved(evt);
            }
        });
        R1Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                R1ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                R1ImageMousePressed(evt);
            }
        });

        R2Image.setText("No Image");
        R2Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                R2ImageMouseDragged(evt);
            }
        });
        R2Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                R2ImageMouseWheelMoved(evt);
            }
        });
        R2Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                R2ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                R2ImageMousePressed(evt);
            }
        });

        R3Image.setText("No Image");
        R3Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                R3ImageMouseDragged(evt);
            }
        });
        R3Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                R3ImageMouseWheelMoved(evt);
            }
        });
        R3Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                R3ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                R3ImageMousePressed(evt);
            }
        });

        R4Image.setText("No Image");
        R4Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                R4ImageMouseDragged(evt);
            }
        });
        R4Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                R4ImageMouseWheelMoved(evt);
            }
        });
        R4Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                R4ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                R4ImageMousePressed(evt);
            }
        });

        R5Image.setText("No Image");
        R5Image.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                R5ImageMouseDragged(evt);
            }
        });
        R5Image.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                R5ImageMouseWheelMoved(evt);
            }
        });
        R5Image.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                R5ImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                R5ImageMousePressed(evt);
            }
        });

        saveConfigurationButton.setText("Save Configuration to File");
        saveConfigurationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigurationButtonActionPerformed(evt);
            }
        });

        saveConfigurationImagesButton.setText("Save Configuration Images");
        saveConfigurationImagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigurationImagesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(rightText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(R0Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(R1Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(R2Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(R3Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(R4Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(R5Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(leftText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(L0Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(L1Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(L2Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(L3Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(L4Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(L5Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(saveConfigurationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveConfigurationImagesButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveConfigurationButton)
                    .addComponent(saveConfigurationImagesButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leftText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L0Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L1Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L2Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L3Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L4Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L5Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rightText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(R0Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(R1Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(R2Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(R3Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(R4Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(R5Image, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Bar Number Input"));

        Left1.setText("-1");
        Left1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left1ActionPerformed(evt);
            }
        });

        Left2.setText("-1");
        Left2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left2ActionPerformed(evt);
            }
        });

        Left3.setText("-1");
        Left3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left3ActionPerformed(evt);
            }
        });

        Left4.setText("-1");
        Left4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left4ActionPerformed(evt);
            }
        });

        Left5.setText("-1");
        Left5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left5ActionPerformed(evt);
            }
        });

        Left6.setText("-1");
        Left6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left6ActionPerformed(evt);
            }
        });

        Left7.setText("-1");
        Left7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left7ActionPerformed(evt);
            }
        });

        Left8.setText("-1");
        Left8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left8ActionPerformed(evt);
            }
        });

        Left9.setText("-1");
        Left9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left9ActionPerformed(evt);
            }
        });

        Left10.setText("-1");
        Left10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left10ActionPerformed(evt);
            }
        });

        Left11.setText("-1");
        Left11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Left11ActionPerformed(evt);
            }
        });

        Right1.setText("-1");
        Right1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right1ActionPerformed(evt);
            }
        });

        Right2.setText("-1");
        Right2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right2ActionPerformed(evt);
            }
        });

        Right3.setText("-1");
        Right3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right3ActionPerformed(evt);
            }
        });

        Right4.setText("-1");
        Right4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right4ActionPerformed(evt);
            }
        });

        Right5.setText("-1");
        Right5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right5ActionPerformed(evt);
            }
        });

        Right6.setText("-1");
        Right6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right6ActionPerformed(evt);
            }
        });

        Right7.setText("-1");
        Right7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right7ActionPerformed(evt);
            }
        });

        Right8.setText("-1");
        Right8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right8ActionPerformed(evt);
            }
        });

        Right9.setText("-1");
        Right9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right9ActionPerformed(evt);
            }
        });

        Right10.setText("-1");
        Right10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right10ActionPerformed(evt);
            }
        });

        Right11.setText("-1");
        Right11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Right11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Left5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left8, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left10, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                    .addComponent(Left1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left11, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Right11)
                    .addComponent(Right5)
                    .addComponent(Right6)
                    .addComponent(Right7)
                    .addComponent(Right8)
                    .addComponent(Right9)
                    .addComponent(Right10)
                    .addComponent(Right4)
                    .addComponent(Right3)
                    .addComponent(Right2)
                    .addComponent(Right1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 22, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(Left1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(Right1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Right11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        debugLogTextArea.setEditable(false);
        debugLogTextArea.setColumns(20);
        debugLogTextArea.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        debugLogTextArea.setLineWrap(true);
        debugLogTextArea.setRows(5);
        debugLogTextArea.setWrapStyleWord(true);
        debugLogTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Debug Log"));
        jScrollPane1.setViewportView(debugLogTextArea);

        PPITextField.setText("2400");
        PPITextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Image Pixels Per Inch"));
        PPITextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PPITextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PPITextField))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PPITextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    class FileWatcher extends TimerTask {
        public void run() {
            System.out.println("test");
            if (imageDirectory != null) {
                Set<String> newFiles = new HashSet<>();
                newFiles.addAll(Arrays.asList(imageDirectory.list()));
                newFiles.removeAll(imageDirectoryContents);
                for (String s : newFiles) {
                    System.out.println("Reading file " + s);
                    File f = new File(imageDirectory,s);
                    try {
                        if (Files.probeContentType(f.toPath()).contains("image")) {
                            directoryChangeAction(s);
                        }
                    } catch (IOException e) {
                        debugPrint("New image file was invalid.");
                    }
                }
                imageDirectoryContents.addAll(newFiles);
            }
            ScannerUI.this.fileWatcherTimer = new java.util.Timer();
            fileWatcherTimer.schedule(new FileWatcher(), 500);
        }
    }
    
    public ScannerUI() {
        initComponents();
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME );
        
        debugText = new StringBuilder();
        barNumbers = new HashMap<>();
        for(int i = 0; i < 22; i++) {
            barNumbers.put(i,-1);
        }
        
        configurationImages = new HashMap<>();
        
        configurationLabels = new HashMap<>();
        configurationLabels.put(0,L0Image);
        configurationLabels.put(1,L1Image);
        configurationLabels.put(2,L2Image);
        configurationLabels.put(3,L3Image);
        configurationLabels.put(4,L4Image);
        configurationLabels.put(5,L5Image);
        configurationLabels.put(6,R0Image);
        configurationLabels.put(7,R1Image);
        configurationLabels.put(8,R2Image);
        configurationLabels.put(9,R3Image);
        configurationLabels.put(10,R4Image);
        configurationLabels.put(11,R5Image);
        
        largeImageCropRects = new HashMap<>();
        largeImageCropRects.put(0,new Rect(300,500,10000,2500));
        largeImageCropRects.put(1,new Rect(300,3010,10000,2500));
        largeImageCropRects.put(2,new Rect(300,5520,10000,2500));
        largeImageCropRects.put(3,new Rect(300,8030,10000,2500));
        largeImageCropRects.put(4,new Rect(300,10540,10000,2500));
        largeImageCropRects.put(5,new Rect(300,13050,10000,2500));
        largeImageCropRects.put(6,new Rect(300,15560,10000,2500));
        largeImageCropRects.put(7,new Rect(300,18070,10000,2500));
        largeImageCropRects.put(8,new Rect(300,20580,10000,2500));
        largeImageCropRects.put(9,new Rect(300,23090,10000,2500));
        largeImageCropRects.put(10,new Rect(300,25600,10000,2400));
        largeImageCropRects.put(11,new Rect(10300,500,10000,2500));
        largeImageCropRects.put(12,new Rect(10300,3010,10000,2500));
        largeImageCropRects.put(13,new Rect(10300,5520,10000,2500));
        largeImageCropRects.put(14,new Rect(10300,8030,10000,2500));
        largeImageCropRects.put(15,new Rect(10300,10540,10000,2500));
        largeImageCropRects.put(16,new Rect(10300,13050,10000,2500));
        largeImageCropRects.put(17,new Rect(10300,15560,10000,2500));
        largeImageCropRects.put(18,new Rect(10300,18070,10000,2500));
        largeImageCropRects.put(19,new Rect(10300,20580,10000,2500));
        largeImageCropRects.put(20,new Rect(10300,23090,10000,2500));
        largeImageCropRects.put(21,new Rect(10300,25600,10000,2400));
        
        configurationRects = new HashMap<>();
        configurationRects.put(0,new Rect(0,0,500,500));
        configurationRects.put(1,new Rect(0,0,500,500));
        configurationRects.put(2,new Rect(0,0,500,500));
        configurationRects.put(3,new Rect(0,0,500,500));
        configurationRects.put(4,new Rect(0,0,500,500));
        configurationRects.put(5,new Rect(0,0,500,500));
        configurationRects.put(6,new Rect(0,0,500,500));
        configurationRects.put(7,new Rect(0,0,500,500));
        configurationRects.put(8,new Rect(0,0,500,500));
        configurationRects.put(9,new Rect(0,0,500,500));
        configurationRects.put(10,new Rect(0,0,500,500));
        configurationRects.put(11,new Rect(0,0,500,500));
        
        configurationSettings = new HashMap<>();
        configurationSettings.put(0,new Setting());
        configurationSettings.put(1,new Setting());
        configurationSettings.put(2,new Setting());
        configurationSettings.put(3,new Setting());
        configurationSettings.put(4,new Setting());
        configurationSettings.put(5,new Setting());
        configurationSettings.put(6,new Setting());
        configurationSettings.put(7,new Setting());
        configurationSettings.put(8,new Setting());
        configurationSettings.put(9,new Setting());
        configurationSettings.put(10,new Setting());
        configurationSettings.put(11,new Setting());
        configurationSettings.put(12,new Setting());
        
        barNumberTextFields = new HashMap<>();
        barNumberTextFields.put(0, Left1);
        barNumberTextFields.put(1, Left2);
        barNumberTextFields.put(2, Left3);
        barNumberTextFields.put(3, Left4);
        barNumberTextFields.put(4, Left5);
        barNumberTextFields.put(5, Left6);
        barNumberTextFields.put(6, Left7);
        barNumberTextFields.put(7, Left8);
        barNumberTextFields.put(8, Left9);
        barNumberTextFields.put(9, Left10);
        barNumberTextFields.put(10, Left11);
        barNumberTextFields.put(11, Right1);
        barNumberTextFields.put(12, Right2);
        barNumberTextFields.put(13, Right3);
        barNumberTextFields.put(14, Right4);
        barNumberTextFields.put(15, Right5);
        barNumberTextFields.put(16, Right6);
        barNumberTextFields.put(17, Right7);
        barNumberTextFields.put(18, Right8);
        barNumberTextFields.put(19, Right9);
        barNumberTextFields.put(20, Right10);
        barNumberTextFields.put(21, Right11);
        
        imageDirectoryContents = new HashSet<>();
        
        selectFGB.setSelected(true);
        FGB = true;
        startup = true;
        configurationPanel.setVisible(true);
        configurationPanel.setVisible(false);
        startup = false;
        configurationPanel.setSize(1150,600);
        configurationPanel.setLocation(10, 10);
        
        tuneCannyLowThreshValue.setText(tuneCannyLowThresh.getValue() + "");
        tuneCannyHighThreshValue.setText(tuneCannyHighThresh.getValue() + "");
        centerThreshValue.setText(centerThresh.getValue() + "");
        centerDistanceValue.setText(centerDistance.getValue() + "");
        minRadiusValue.setText(minRadius.getValue() + "");
        maxRadiusValue.setText(maxRadius.getValue() + "");
        gaussianKernalSizeValue.setText(gaussianKernalSize.getValue() + "");
        gaussianSigmaXValue.setText(gaussianSigmaX.getValue() + "");
        gaussianSigmaYValue.setText(gaussianSigmaY.getValue() + "");

        currDirText.setText("None");
        //currFileText.setText("None");
        currConfigPictureText.setText("None");
        //currConfigFileText.setText("None");     
        
        ScannerUI.this.fileWatcherTimer = new java.util.Timer();
        //fileWatcherTimer.schedule(new FileWatcher(), 500);

        
    }
    
    public void debugPrint(String str) {
        debugText.append("\n").append(str);
        debugLogTextArea.setText(debugText.toString());
    }
    
    public void assignMatToLabel(Mat img, JLabel label) {
        BufferedImage bimg = CV.matToBufferedImage(img, null);
        label.setIcon(new ImageIcon(bimg.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_FAST)));
    }
    
    public void assignBufferedImageToLabel(BufferedImage bimg, JLabel label) {
        label.setIcon(new ImageIcon(bimg.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_FAST)));
    }
    
    public void drawCirclesOnImageToLabel(BufferedImage img, Mat circles, int numCircles, int index, JLabel label) {
        BufferedImage imgRGB = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        imgRGB.getGraphics().drawImage(img, 0, 0, null);
        Graphics2D g = imgRGB.createGraphics();
//            g = img.createGraphics();
        g.setColor(Color.red);
        g.setStroke(new BasicStroke(1));
        if (index == 0) {
            int limit = (numCircles < circles.width() ? numCircles : circles.width());
            for (int i = 0; i < limit; i++) {
                Point center = new Point((int) circles.get(0,i)[0], (int) circles.get(0,i)[1]);
                int radius = (int) circles.get(0,i)[2];
                g.drawOval((int) (center.x - radius), (int) (center.y - radius), 2*radius, 2*radius);
            }
        } else if (index > 0) {
            Point center = new Point((int) circles.get(0,index)[0], (int) circles.get(0,index)[1]);
            int radius = (int) circles.get(0,index)[2];
            g.drawOval((int) (center.x - radius), (int) (center.y - radius), 2*radius, 2*radius);
        }
        g.dispose();
        assignBufferedImageToLabel(imgRGB,label);
    }
    
    private void selectFGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFGBActionPerformed
        // TODO add your handling code here:
        FGB = true;
        SMB = false;
        loadFiles();
    }//GEN-LAST:event_selectFGBActionPerformed

    private void selectDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDirectoryButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        chooser.showSaveDialog(null);

        try {
            mainDirectory = chooser.getSelectedFile().getAbsoluteFile();
            if (mainDirectory != null && mainDirectory.exists()) {
                String mainDirectoryString = mainDirectory.toString();
                currDirText.setText(mainDirectoryString);
                debugPrint("Found Main Directory: " + mainDirectoryString);
                imageDirectory = new File(mainDirectoryString + "\\Images");
                measurementDirectory = new File(mainDirectoryString + "\\Measurements");
                configDirectory = new File(mainDirectoryString + "\\Configuration");
                barDirectory = new File(measurementDirectory, "\\Bars");
                barHoleDirectory = new File(measurementDirectory, "\\BarHoles");
                if (! imageDirectory.exists()) {
                    debugPrint("Image directory does not exist. Creating one.");
                    imageDirectory.mkdir();
                } else {
                    imageDirectoryContents.addAll(Arrays.asList(imageDirectory.list()));
                }
                if (! measurementDirectory.exists()) {
                    debugPrint("Measurement directory does not exist. Creating one.");
                    measurementDirectory.mkdir();
                }
                if (! configDirectory.exists()) {
                    debugPrint("Configuration directory does not exist. Creating one.");
                    configDirectory.mkdir();
                }
                if (! barDirectory.exists()) {
                    debugPrint("Directory for bar images does not exist. Creating one.");
                    barDirectory.mkdir();
                }
                if (! barHoleDirectory.exists()) {
                    debugPrint("Directory for hole images does not exist. Creating one.");
                    barHoleDirectory.mkdir();
                }
                if (imageListener != null) {
                    imageListener.bRun = false;
                }
                /*
                try {
                    DirectoryWatchService watchService = new SimpleDirectoryWatchService(); // May throw
                    watchService.register( // May throw
                            new DirectoryWatchService.OnFileChangeListener() {
                                @Override
                                public void onFileCreate(String filePath) {
                                    // File created
                                    test(new File(filePath));
                                }

                                @Override
                                public void onFileModify(String filePath) {
                                    // File modified
                                    test(new File(filePath));
                                }

                                @Override
                                public void onFileDelete(String filePath) {
                                    // File deleted
                                    test(new File(filePath));
                                }
                            },"C:\\Users\\Steven\\Desktop\\Test\\Images"
                    );
                    watchService.start();
                } catch (IOException e) {
                    System.out.println(e);
                }
                */
                //imageListener = new FileListener(mainDirectoryString + "\\Images",this);
                //Thread thr = new Thread(imageListener);
                //thr.start();
                loadFiles();
            } else {
                JOptionPane.showMessageDialog(null,"Please select a valid working directory.");
                debugPrint("Error: Selected directory is not valid or does not exist!");
            }
        } catch(NullPointerException e) {
            
        }
        
    }//GEN-LAST:event_selectDirectoryButtonActionPerformed
    
    public void test(File f) {
        System.out.println("Been called. File: " + f.toString());
        //debugPrint("Opening new file.");
    }
    
    private void loadFiles() {
        debugPrint("Loading files.");
        if (mainDirectory != null && mainDirectory.exists()) {
            loadMeasurementFile();
            loadConfigurationFile();
            loadConfigurationRectFile();
            loadConfigurationPicture();
        } else {
            JOptionPane.showMessageDialog(null,"Please select a valid working directory.");
        }
    }
    
    private void loadConfigurationPicture() {
        File configPic = new File(configDirectory,"ConfigurationPicture" + (FGB ? "FGB" : "SMB") + ".png");
        debugPrint("Loading '" + "ConfigurationPicture" + (FGB ? "FGB" : "SMB") + ".png'");
        if (!configPic.exists()) {
            debugPrint("The configuration picture does not exist. Make sure to load one using the 'Select Config Pic' button.");
        } else {
            File configPicturePath = configPic.getAbsoluteFile();
            currConfigPictureText.setText(configPicturePath.toString());
            try {
                configImage = imread(configPicturePath.toString(),CvType.CV_8UC1);
                configLeft = new Mat(configImage, largeImageCropRects.get(0));
                configRight = new Mat(configImage, largeImageCropRects.get(11));
                splitConfigPicture();
            } catch(CvException e) {
                debugPrint("Error opening configuration picture.");
                
            }        
        }
    }
    
    private void loadConfigurationRectFile() {
        configurationRectFile = new File(configDirectory,"ConfigurationRect" + (FGB ? "FGB" : "SMB") + ".txt");
        debugPrint("Loading '" + "ConfigurationRect" + (FGB ? "FGB" : "SMB") + ".txt'");
        if (configurationRectFile == null || !configurationRectFile.exists()) {
            JOptionPane.showMessageDialog(null,"The Crop Configuration file does not exist. Creating one.");
            makeConfigurationRectFile();
        } else {
            readConfigurationRectFile();
        }
    }
    
    private void makeConfigurationRectFile() {
        if (configDirectory != null && configDirectory.exists()) {
            try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(configDirectory.toString() + "\\ConfigurationRect" +(FGB ? "FGB" : "SMB") + ".txt"), "utf-8"))) {
                debugPrint("Writing configuration file for " + (FGB ? "FGB" : "SMB"));
                writer.write("Hole\tx\ty\twidth\theight\t\n");
                
                // Print out each rectangle used to crop out the holes - dependent on configuration
                // The first 6 in the list correspond to the left, second six correspond to the right
                for (int i = 0; i < 12; i++) {
                    Rect r = configurationRects.get(i);
                    writer.write((i < 6 ? "L" : "R") + (i%6) + "\t"+r.x + "\t" + r.y + "\t" +r.width + "\t" +r.height + "\t"  +"\n");
                }
            } catch (IOException e) {
                  System.out.println(e);
                  debugPrint("Cropping Configuration file could not be made.");
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please select a valid working directory.");
        }
    }
    
    private void readConfigurationRectFile() {
        debugPrint("Interpreting cropping configuration file.");
        if (configurationRectFile != null && configurationRectFile.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(configurationRectFile.toString()))) {
                String line;
                String hole;
                int a, b, c, d;
                reader.readLine();
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                    String[] arr = line.split("\t");
                    if (arr.length != 5) {
                        debugPrint("Error in configuration file. Try saving a new file or inspect file for formatting errros.");
                        return;
                    }
                    hole = arr[0];
                    a = Integer.parseInt(arr[1]);
                    b = Integer.parseInt(arr[2]);
                    c = Integer.parseInt(arr[3]);
                    d = Integer.parseInt(arr[4]);
                    switch (hole.charAt(0)) {
                        case 'L':
                            {
                                int which = Character.getNumericValue(hole.charAt(1));
                                configurationRects.put(which, new Rect(a,b,c,d));
                                break;
                            }
                        case 'R':
                            {
                                int which = Character.getNumericValue(hole.charAt(1)) + 6;
                                configurationRects.put(which, new Rect(a,b,c,d));
                                break;
                            }
                        default:
                            debugPrint("Error in configuration file!");
                            break;
                    }
                }
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        } else {
            debugPrint("Cropping configuration file does not exist.");
        }

    }
    
    private void loadConfigurationFile() {
        configurationFile = new File(configDirectory,"Configuration" + (FGB ? "FGB" : "SMB") + ".txt");
        debugPrint("Loading '" + "Configuration" + (FGB ? "FGB" : "SMB") + ".txt'");
        if (configurationFile == null || !configurationFile.exists()) {
            debugPrint("The image processing configuration file does not exist. Creating one.");
            makeConfigurationFile();
        } else {
            //currConfigFileText.setText(configurationFile.getAbsoluteFile().toString());
            readConfigurationFile();
        }

    }
    
    private void makeConfigurationFile() {
        if (configDirectory != null && configDirectory.exists()) {
            try (
                Writer writer = new BufferedWriter(new OutputStreamWriter(
                        new FileOutputStream(configDirectory.toString() + "\\Configuration" + (FGB ? "FGB" : "SMB") + ".txt"), "utf-8"))) {
                writer.write("Hole\tCanny High Thresh\tKernal Size\tSigma X\tSigma Y\tCenter Distance\tCenter Threshold\tMin Radius\tMax Radius\n");
                for (int i = 0; i < 12; i++) {
                    writer.write("L1\t"+configurationSettings.get(i).toString()+"\n");
                }
                //currConfigFileText.setText(configurationFile.getAbsoluteFile().toString());
            } catch (IOException e) {
                System.out.println(e.getMessage());
                debugPrint("Configuration File could not be made");
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please select a valid working directory.");
        }
    }
    
    private void readConfigurationFile() {
        debugPrint("Interpreting configuration file.");
        if (configurationFile != null && configurationFile.exists()) {
            try (BufferedReader reader = new BufferedReader(new FileReader(configurationFile.toString()))) {
                String line;
                String hole;
                int a, b, e, f, g, h;
                double c, d;
                reader.readLine();
                while ((line = reader.readLine()) != null) {
//                    System.out.println(line);
                    String[] arr = line.split("\t");
                    if (arr.length != 9) {
                        JOptionPane.showMessageDialog(null,"Error in configuration file. Try saving a new file or inspect file for formatting errros.");
                        return;
                    }
                    hole = arr[0];
                    a = Integer.parseInt(arr[1]);
                    b = Integer.parseInt(arr[2]);
                    c = Double.parseDouble(arr[3]);
                    d = Double.parseDouble(arr[4]);
                    e = Integer.parseInt(arr[5]);
                    f = Integer.parseInt(arr[6]);
                    g = Integer.parseInt(arr[7]);
                    h = Integer.parseInt(arr[8]);
                    switch (hole.charAt(0)) {
                        case 'L':
                            {
                                int which = Character.getNumericValue(hole.charAt(1));
                                configurationSettings.put(which, new Setting(a,a/2,b,c,d,e,f,g,h));
                                break;
                            }
                        case 'R':
                            {
                                int which = Character.getNumericValue(hole.charAt(1)) + 6;
                                configurationSettings.put(which, new Setting(a,a/2,b,c,d,e,f,g,h));
                                break;
                            }
                        default:
                            debugPrint("Error in configuration file: Did not find L or R at start of row.");
                            break;
                    }
                }
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    private void loadMeasurementFile() {
        debugPrint("Loading '" + "Measurements" + (FGB ? "FGB" : "SMB") + ".txt'");
        measurementFile = new File(measurementDirectory, "Measurements" + (FGB ? "FGB" : "SMB") + ".txt");
        if (measurementFile == null || !measurementFile.exists()) {
            debugPrint("The measurements file does not exist. Creating one at " + measurementFile.toString());
            makeMeasurementsFile();
        } else {
            //currFileText.setText(measurementFile.toString());
        }
    }
    
    private void makeMeasurementsFile() {
        if (measurementDirectory != null && measurementDirectory.exists()) {
            File f;
            if (FGB) {
                f = new File(measurementDirectory, "MeasurementsFGB.txt");
            } else {
                f = new File(measurementDirectory, "MeasurementsSMB.txt");
            }
            if (FGB) {
                try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                              new FileOutputStream(measurementDirectory.toString() + "\\MeasurementsFGB.txt"), "utf-8"))) {
                    writer.write("\tLeft\t\t\t\tFiber 1\t\t\t\t\tFiber 2\t\t\t\t\tFiber 3\t\t\t\t\tFiber 4\t\t\t\t\tRight\n");
                    writer.write("FGB Num\tx (mm)\ty (mm)\tradius (mm)\t~\tflagged\t");
                    writer.write("x (mm)\ty (mm)\tradius (mm)\t~\tflagged\t");
                    writer.write("x (mm)\ty (mm)\tradius (mm)\t~\tflagged\t");
                    writer.write("x (mm)\ty (mm)\tradius (mm)\t~\tflagged\t");
                    writer.write("x (mm)\ty (mm)\tradius (mm)\t~\tflagged\t");
                    writer.write("x (mm)\ty (mm)\tradius (mm)\t~\tflagged\t");
                    //currFileText.setText(measurementDirectory.toString() + "\\MeasurementsFGB.txt");
                } catch (IOException e) {
                    System.out.println(e);
                    debugPrint("FGB Measurement file could not be made.");
                }
            } else {
                try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                              new FileOutputStream(measurementDirectory.toString() + "\\MeasurementsSMB.txt"), "utf-8"))) {
                    writer.write("\tLeft\t\t\t\t\tSquare 1\t\t\t\t\tSquare 2\t\t\t\t\tSquare 3\t\t\t\t\tSquare 4\t\t\t\t\tRight\n");
                    writer.write("SMB Num\t");
                    writer.write("x (mm)\ty (mm)\tradius (mm)\t~\tflagged\t");
                    writer.write("x (mm)\ty (mm)\twidth (mm)\theight (mm)\tflagged\t");
                    writer.write("x (mm)\ty (mm)\twidth (mm)\theight (mm)\tflagged\t");
                    writer.write("x (mm)\ty (mm)\twidth (mm)\theight (mm)\tflagged\t");
                    writer.write("x (mm)\ty (mm)\twidth (mm)\theight (mm)\tflagged\t");
                    writer.write("x (mm)\ty (mm)\twidth (mm)\theight (mm)\tflagged\n");
                    //currFileText.setText(measurementDirectory.toString() + "\\MeasurementsSMB.txt");
                } catch (IOException e) {
                    System.out.println(e);
                    System.out.println("SMB Measurement file could not be made.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please select a valid working directory.");
        }

    }
    
    
    private void selectSMBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSMBActionPerformed
        // TODO add your handling code here:
        FGB = false;
        SMB = true;
        loadFiles();
    }//GEN-LAST:event_selectSMBActionPerformed

    private void selectConfigPicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectConfigPicButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        try {
            if (mainDirectory != null && mainDirectory.exists()) {
                chooser.setCurrentDirectory(mainDirectory);
            }
            chooser.showSaveDialog(null);
            File configPicturePath;
            configPicturePath = chooser.getSelectedFile().getAbsoluteFile();
            currConfigPictureText.setText(configPicturePath.toString());
            try {
                configImage = imread(configPicturePath.toString(), CvType.CV_8UC1);
                
//                loadConfigurationPicture();
                splitConfigPicture();
            } catch(CvException e) {
                debugPrint(e.getMessage());
            }
        } catch (NullPointerException e) {
            
        }
    }//GEN-LAST:event_selectConfigPicButtonActionPerformed

    private void setConfigState(Setting s) {
        System.out.println("Setting the configuration state.");
        tuneCannyHighThresh.setValue(s.getCannyHighThresh());
        tuneCannyLowThresh.setValue(s.getCannyHighThresh()/2);
        centerDistance.setValue(s.getCenterDist());
        centerThresh.setValue(s.getCenterThresh());
        gaussianKernalSize.setValue((int)s.getKernalSize().height);
        gaussianSigmaX.setValue((int)s.getGaussianSigmaX());
        gaussianSigmaY.setValue((int)s.getGaussianSigmaY());
        minRadius.setValue((int)s.getMinRadius());
        maxRadius.setValue((int)s.getMaxRadius());
        if (overlayCircleCheckBox.isSelected()) {
            overlayCircleCheckBox.setSelected(false);
        }
        if (showOriginalImageCheckBox.isSelected()) {
            showOriginalImageCheckBox.setSelected(false);
        }
        
    }
    
    private void previewChange() {
        if (!startup) {
            if (FGB) {
                System.out.println("Changing FGB configuration preview with config number " + configSelect);
                Mat img = new Mat((configSelect < 6 ? configLeft : configRight), configurationRects.get(configSelect));
                Mat i = new Mat();
                img.copyTo(i);
                Mat blurred = new Mat(i.width(),i.height(),i.type());
                Imgproc.GaussianBlur(i, blurred, new Size(gaussianKernalSize.getValue(),gaussianKernalSize.getValue()),gaussianSigmaX.getValue(),gaussianSigmaY.getValue());
                Mat edges = new Mat(blurred.width(),blurred.height(),blurred.type());
                byte[] bytes = new byte[edges.cols() * edges.rows() * (int)edges.elemSize()];
//                System.out.println(blurred.get(0,0, bytes));
                Imgproc.Canny(blurred, edges, tuneCannyLowThresh.getValue(), tuneCannyHighThresh.getValue());

                if (overlayCircleCheckBox.isSelected()) {
                    Mat circles = new Mat();
                    Imgproc.HoughCircles(blurred, circles, Imgproc.CV_HOUGH_GRADIENT, 1, centerDistance.getValue(), tuneCannyHighThresh.getValue(), centerThresh.getValue(), minRadius.getValue(), maxRadius.getValue());
                    System.out.println(circles.dump());
                    int index = 0;
                    double minRad = 100000;
                    int limit = circles.width();
                    for (int j = 0; j < limit; j++) {
                        if (circles.get(0,j)[2] < minRad) {
                            minRad = circles.get(0,j)[2];
                            index = j;
                        }
                    }
                    System.out.println("Chose circle: " + index + " with radius: " + minRad);
                    if (showOriginalImageCheckBox.isSelected()) {
                        drawCirclesOnImageToLabel(CV.matToBufferedImage(i,null),circles,1,index,previewImage);
                    } else {
                        drawCirclesOnImageToLabel(CV.matToBufferedImage(edges,null),circles,1,index,previewImage);
                    }
                } else {
                    if (showOriginalImageCheckBox.isSelected()) {
                        assignMatToLabel(i,previewImage);
                    } else {
                        assignMatToLabel(edges, previewImage);
                    }
                }
            } else {
                debugPrint("Changing SMB configuration preview with config number " + configSelect);
                Mat m = new Mat((configSelect < 6 ? configLeft : configRight),configurationRects.get(configSelect));
                Mat i = new Mat();
                m.copyTo(i);
                Mat blurred = new Mat(i.width(),i.height(),i.type());
                Imgproc.GaussianBlur(i, blurred, new Size(gaussianKernalSize.getValue(),gaussianKernalSize.getValue()),gaussianSigmaX.getValue(),gaussianSigmaY.getValue());
                Mat edges = new Mat(blurred.width(),blurred.height(),blurred.type());
                Imgproc.Canny(blurred, edges, tuneCannyLowThresh.getValue(), tuneCannyHighThresh.getValue());
                // System.out.println("Size: (rows, cols): " + edges.rows() + ", " + edges.cols());
                if (overlayCircleCheckBox.isSelected() && !overlayRectangleCheckBox.isSelected()) {
                    Mat circles = new Mat();
                    Imgproc.HoughCircles(blurred, circles, Imgproc.CV_HOUGH_GRADIENT, 1, centerDistance.getValue(), tuneCannyHighThresh.getValue(), centerThresh.getValue(), minRadius.getValue(), maxRadius.getValue());
                    System.out.println(circles.dump());
                    int index = 0;
                    double minRad = 100000;
                    int limit = circles.width();
                    for (int j = 0; j < limit; j++) {
                        if (circles.get(0,j)[2] < minRad) {
                            minRad = circles.get(0,j)[2];
                            index = j;
                        }
                    }
                    debugPrint("Chose circle: " + index + " with radius: " + minRad);
                    if (showOriginalImageCheckBox.isSelected()) {
                        drawCirclesOnImageToLabel(CV.matToBufferedImage(i,null),circles,1,index,previewImage);
                    } else {
                        drawCirclesOnImageToLabel(CV.matToBufferedImage(edges,null),circles,1,index,previewImage);
                    }
                } else if (overlayRectangleCheckBox.isSelected()) {
                    BufferedImage img = CV.matToBufferedImage(edges,null);
                    int midX = img.getWidth()/2;
                    int midY = img.getHeight()/2;
                    int minRight = 10000, minLeft = 0, minTop = 0, minBottom = 10000;
                    for (int k = midY - 50; k < midY + 50; k++) {
                        OUTER:
                        for (int j = midX; j < edges.cols(); j++) {
                            int b = (img.getRGB(j,k) & 0xff) >> 7;
                            switch (b) {
                                case 1:
                                    if (j < minRight) minRight = j;
                                    break OUTER;
                                case 0:
                                    break;
                                default:
                                    System.out.println(b);
                                    break;
                            }
                        }
                    }
                    for (int k = midY - 50; k < midY + 50; k++) {
                        OUTER_1:
                        for (int j = midX; j > 0; j--) {
                            int b = (img.getRGB(j,k) & 0xff) >> 7;
                            switch (b) {
                                case 1:
                                    if (j > minLeft) minLeft = j;
                                    break OUTER_1;
                                case 0:
                                    break;
                                default:
                                    System.out.println(b);
                                    break;
                            }
                        }
                    }
                    for (int j = midX - 50; j < midX + 50; j++) {
                        OUTER_2:
                        for (int k = midY; k < edges.rows(); k++) {
                            int b = (img.getRGB(j,k) & 0xff) >> 7;
                            switch (b) {
                                case 1:
                                    if (k < minBottom) minBottom = k;
                                    break OUTER_2;
                                case 0:
                                    break;
                                default:
                                    System.out.println(b);
                                    break;
                            }
                        }
                    }
                    for (int j = midX - 50; j < midX + 50; j++) {
                        OUTER_3:
                        for (int k = midY; k > 0; k--) {
                            int b = (img.getRGB(j,k) & 0xff) >> 7;
                            switch (b) {
                                case 1:
                                    if (k > minTop) minTop = k;
                                    break OUTER_3;
                                case 0:
                                    break;
                                default:
                                    System.out.println(b);
                                    break;
                            }
                        }
                    }
                    debugPrint("Found (top, bottom): (" + minTop + ", " + minBottom +")");
                    debugPrint("Drawing Rectangle: (" + minLeft + ", " + minTop + ", " + (minRight-minLeft) +", " + (minBottom-minTop) + ")" );
                    if (showOriginalImageCheckBox.isSelected()) {
                        drawRectangleOnImageToLabel(CV.matToBufferedImage(i,null),new Rectangle2D.Double(minLeft,minTop,minRight-minLeft,minBottom-minTop),previewImage);
                    } else {
                        drawRectangleOnImageToLabel(img,new Rectangle2D.Double(minLeft,minTop,minRight-minLeft,minBottom-minTop),previewImage);
                    }
                } else {
                    if (showOriginalImageCheckBox.isSelected()) {
                        assignMatToLabel(i,previewImage);
                    } else {
                        assignMatToLabel(edges,previewImage);
                    }
                }
            }
        }
    }
        
    private void drawRectangleOnImageToLabel(BufferedImage img, Rectangle2D rect, JLabel label) {
        BufferedImage imgRGB = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        imgRGB.getGraphics().drawImage(img, 0, 0, null);
        Graphics2D g = imgRGB.createGraphics();
        g.setColor(Color.red);
        g.setStroke(new BasicStroke(1));
        g.draw(rect);
        g.dispose();
        assignBufferedImageToLabel(imgRGB,label);
    }
    
    private ArrayList<Bar> getBarsFromImage(Mat img) {
        ArrayList<Bar> ret = new ArrayList<>();
        for(int i = 0; i < 22; i++) {
            int barNum = barNumbers.get(i);
            if (barNum == -1) {
                continue;
            }
            Rect r = largeImageCropRects.get(i);
//            System.out.println("Making new bar with rectangle: [" + r.x + ", " + r.y + ", " + r.width + ", " + r.height +"]");
            try {
                Mat im = new Mat(img, r);
                if (FGB) {
                    ret.add(new Bar(im, barNum, (i < 11 ? 'L' : 'R'), r));
                } else {
                    ret.add(new Bar(im, barNum, (i < 11 ? 'L' : 'R'), r));
                }
                File f = new File(measurementDirectory,"\\Bars\\" + (FGB ? "FGB" : "SMB") + "_" + barNum + ".jpg");
                if (f.exists()) {
                    debugPrint("Warning: A bar was already measured with bar number " + barNum);
                    for (int j = 1;;j++) {
                        f = new File(measurementDirectory,"\\Bars\\" + (FGB ? "FGB" : "SMB") + "_" + barNum + " ("+j+").jpg");
                        if (!f.exists()) break;
                    }
                }
                try {
                    MatOfInt params = new MatOfInt(CV_IMWRITE_JPEG_QUALITY,50);
                    imwrite(f.toString(),im,params);
                } catch (CvException ex) {
                    debugPrint("Could not write sub image to file.");
                    debugPrint(ex.getMessage());
                }
            } catch (CvException ex) {
                debugPrint("Error getting all bars from image - sub image could not be extracted.");
                ret = null;
                return ret;
            }
        }
        return ret;
    }
    
    public void directoryChangeAction(String fileName) {
        File f = new File(imageDirectory,fileName);
        if (f.exists()) {
            try {
                System.out.println("Reading new image: " + f.toString());
                fullImage = imread(f.toString(),CvType.CV_8UC1);
                if (fullImage != null) {
                    if (fullImage.cols() < PPI*20300/2400) {
                        debugPrint("Error: New image is not wide enough! Must be at least 20300 pixels wide. Make sure you are scanning the full image.");
                    }
                    if (fullImage.rows() < PPI*28000/2400) {
                        debugPrint("Error: New image in not tall enough! Must be at least 28000 pixels in height. Make sure you are scanning the full image.");
                    }
                    System.out.println("Getting individual bars from entire image.");
                    ArrayList<Bar> barsFromImage = getBarsFromImage(fullImage);
                    if (barsFromImage != null) {
                        System.out.println("Processing each bar.");
                        processImage(barsFromImage);
                    }
                } else {
                    System.out.println("Error obtaining image from file.");
                }
            } catch (CvException ex) {
                System.out.println("Image file found from directory change was invalid.");
            }
        }
    }
    
    private void processImage(ArrayList<Bar> bars) {
        int limit = bars.size();
        System.out.println("Processing " + limit + " bars.");
        if (limit == 0) {
            debugPrint("It looks like no bars were processed. Ensure that bar numbers were entered at the input.");
            bar_numbers_not_entered = true;
        }
        for (int i = 0; i < limit; i++) {
            Bar b = bars.get(i);
            if (b.getBarNum() == -1) {
                continue;
            }
            if (FGB) {
                debugPrint("Measuring FGB " + b.barNum);
                measureFGB(b);
            } else {
                debugPrint("Measuring SMB " + b.barNum);
                measureSMB(b);
            }
        }
    }
    
    private void measureFGB(Bar b) {
        ArrayList<Mat> holes = splitBarIntoHoles(b);
        ArrayList<Double> meas = b.getMeasurements();
        int offset = (b.isLeft() ? 0 : 6);
        for (int i = 0; i < 6; i++) {
            Rect r = configurationRects.get(i);
            meas.addAll(fitCircle(holes.get(i),configurationSettings.get(i + offset),r.x,r.y, b.getBarNum()));
        }
        printMeasurementToFile(meas,b.barNum,"FGB");
    }
    
    private void measureSMB(Bar b) {
        ArrayList<Mat> holes = splitBarIntoHoles(b);
        ArrayList<Double> meas = b.getMeasurements();
        int offset = (b.isLeft() ? 0 : 6);
        for (int i = 0; i < 6; i++) {
            Rect r = configurationRects.get(i);
            if (i == 0) {
                meas.addAll(fitCircle(holes.get(i),configurationSettings.get(i + offset),r.x + b.crop.x,r.y + b.crop.y, b.getBarNum()));
            } else {
                meas.addAll(fitSquare(holes.get(i),configurationSettings.get(i + offset),r.x + b.crop.x,r.y + b.crop.y, b.getBarNum()));
            }
        }
        printMeasurementToFile(meas,b.barNum,"SMB");
    }
    
    private void printMeasurementToFile(ArrayList<Double> measurements, int barNum, String choose) {
        //debugPrint("Printing bar " + barNum + " measurements.");
        //debugPrint(Arrays.toString(measurements.toArray()));
        try (PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(measurementFile,true)))) {
            debugPrint("Writing " + measurements.size() + " measurements to " + measurementFile.getPath());
            int size = measurements.size();
            // First two measurements are (0, 0)
            // Last two measurements are (x, 0)
            double zeroX = measurements.get(0);
            double zeroY = measurements.get(1);
            
            double slope = 0;
            if (SMB) {
                slope = (measurements.get(21) - zeroY)/(measurements.get(20) - zeroX);
            } else {
                slope = (measurements.get(16) - zeroY)/(measurements.get(15) - zeroX);
            }
            ArrayList<Double> modifiedMeasurements = new ArrayList<>(size);
            for (int i = 0; i < size; i++) {
                switch (i % 4) {
                    case 0:
                        {
                            double x = measurements.get(i) - zeroX;
                            modifiedMeasurements.add(x);
                            break;
                        }
                    case 1:
                        {
                            double x = measurements.get(i - 1) - zeroX;
                            double y = (measurements.get(i) - zeroY) - (slope*x);
                            modifiedMeasurements.add(y);
                            break;
                        }
                    default:
                        modifiedMeasurements.add(measurements.get(i));
                        break;
                }
            }
            for (int i = 0; i < size; i++) {
                double meas = modifiedMeasurements.get(i);
                if (meas != -1) {
                    meas /= PPI;
                    meas *= 25.4;
                }
                if (i == 0) {
                    writer.write("" + barNum + "\t" + meas + "\t");
                } else if ((i % 4 == 0)) {
                    writer.write("\t");
                    writer.write(meas + "\t");
                } else {
                    writer.write(meas + "\t");
                }
            }
            writer.write("\n");
        } catch (IOException e) {
            print_measurement_error = true;
        }
    }
    
    private ArrayList<Double> fitCircle(Mat imgIn, Setting setting, int xOff, int yOff, int bar_num) {
        System.out.println("Fitting circle with setting: " + setting.toString());
        ArrayList<Double> retMeasurements = new ArrayList<>(4);
        Mat blurred = new Mat(imgIn.cols(),imgIn.rows(),imgIn.type());
        Imgproc.GaussianBlur(imgIn, blurred, setting.getKernalSize(), setting.getGaussianSigmaX(), setting.getGaussianSigmaY());
        Mat edges = new Mat(blurred.width(), blurred.height(), blurred.type());
        Imgproc.Canny(blurred, edges, setting.cannyLowThresh, setting.cannyHighThresh);
        Mat circles = new Mat();
        Imgproc.HoughCircles(edges, circles, Imgproc.CV_HOUGH_GRADIENT, 1, setting.centerDist, setting.cannyHighThresh, setting.centerThresh, setting.minRadius, setting.maxRadius);
        System.out.println("Circles: " + circles.dump());
        int index = 0;
        double minRad = Double.MAX_VALUE;
        int limit = circles.width();
        for (int j = 0; j < limit; j++) {
            if (circles.get(0,j)[2] < minRad) {
                minRad = circles.get(0,j)[2];
                index = j;
            }
        }
        File out;
        for (int j = 0;; j++) {
                out = new File(measurementDirectory + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + bar_num + "\\", "Hole_" + j + "_edges" + ".jpg");
                if (!out.exists()) break;
        }
        if (circles.width() == 0) {
            System.out.println("No circles found in bar! Trying simple method");
            retMeasurements = fitCircleSimple(imgIn, setting, xOff, yOff, bar_num);
//            retMeasurements.add(-1.);
//            retMeasurements.add(-1.);
//            retMeasurements.add(-1.);
//            retMeasurements.add(-1.);
        } else {
//            System.out.println("Found a circle, adding to measurements.");
            double center_x = circles.get(0, index)[0];
            double center_y = circles.get(0, index)[1];
            double radius = circles.get(0, index)[2];
            retMeasurements.add(center_x + xOff);
            retMeasurements.add(center_y + yOff);
            retMeasurements.add(radius);
            retMeasurements.add(-1.);
            File out_draw;
            for (int j = 0;; j++) {
                out_draw = new File(measurementDirectory + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + bar_num + "\\", "Hole_" + j + "_draw" + ".jpg");
                if (!out_draw.exists()) break;
            }
            Imgproc.Canny(blurred, edges, setting.cannyLowThresh, setting.cannyHighThresh);
            drawCircleOnImageAndSave(imgIn, out_draw, (int) Math.round(center_x), (int) Math.round(center_y), (int) Math.round(radius));
        }
        imwrite(out.toString(), edges);
        return retMeasurements;
    }
 
    private ArrayList<Double> fitCircleContours(Mat circle, Setting setting, int xOff, int yOff, int bar_num) {
        System.out.println("Fitting circle with setting: " + setting.toString());
        ArrayList<Double> retMeasurements = new ArrayList<>(4);
        // Make an edge image of the circle
        
        Mat blurred = new Mat(circle.width(), circle.height(), circle.type());
        Imgproc.GaussianBlur(circle, blurred, setting.kernalSize,setting.gaussianSigmaX, setting.gaussianSigmaY);
        Mat edges = new Mat(blurred.width(), blurred.height(), blurred.type());
        Imgproc.Canny(blurred, edges, setting.cannyLowThresh, setting.cannyHighThresh);
        
//        Mat wider_edges = new Mat();
//        Mat se = Imgproc.getStructuringElement(Imgproc.MORPH_DILATE, new Size(2, 2));
//        Imgproc.dilate(edges, wider_edges, se);
//        imwrite("C:\\Users\\Steven\\Desktop\\Test\\Images\\dilated.jpg", wider_edges);
        
        List<MatOfPoint> contours = new ArrayList<>();
        Imgproc.findContours(edges.clone(), contours, new Mat(), Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE);

        System.out.println("Found " + contours.size() + " contours.");

//        double minArea = 2. * Math.PI * 225;
//        double maxArea = 2. * Math.PI * 235;

        int largest = 0;
        int second_largest = 0;
        double max_area = 0;
        for (int i = 0; i < contours.size(); i++) {
            double area = Imgproc.contourArea(contours.get(i));
            if (area > max_area) {
                max_area = area;
                largest = i;
            }
        }
        double second_max_area = 0;
        for (int i = 0; i < contours.size(); i++) {
            double area = Imgproc.contourArea(contours.get(i));
            if (area > second_max_area && area < max_area) {
                second_max_area = area;
                second_largest = i;
            }
        }
//        Imgproc.cvtColor(edges, draw, Imgproc.COLOR_GRAY2BGR);
//        Imgproc.drawContours(draw, contours, -1, new Scalar(0, 255, 0));
//        imwrite("C:\\Users\\Steven\\Desktop\\Test\\Images\\contours_all.jpg", draw);

        float[] radius = new float[1];
        Point center = new Point();
        Imgproc.minEnclosingCircle(new MatOfPoint2f(contours.get(largest).toArray()), center, radius);
        System.out.println("Found circle with center (" + center.x + ", " + center.y + ") and radius " + radius[0]);
        Point large_contour_center = center;
        double large_contour_radius = (double) radius[0];

        radius = new float[1];
        center = new Point();
        Imgproc.minEnclosingCircle(new MatOfPoint2f(contours.get(second_largest).toArray()), center, radius);
        System.out.println("Found circle with center (" + center.x + ", " + center.y + ") and radius " + radius[0]);
        Point small_contour_center = center;
        double small_contour_radius = (double) radius[0];

        double min_radius = 225;
        double max_radius = 235;
        boolean small_good, large_good;
        if (small_contour_radius > min_radius && small_contour_radius < max_radius) {
            if (small_contour_radius < large_contour_radius || ! (large_contour_radius > min_radius && large_contour_radius < max_radius)) {
                retMeasurements.add(small_contour_center.x);
                retMeasurements.add(small_contour_center.y);
                retMeasurements.add(small_contour_radius);
                retMeasurements.add(-1.);
                File out_draw;
                for (int j = 0;; j++) {
                    out_draw = new File(measurementDirectory + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + bar_num + "\\", "Hole_" + j + "_draw" + ".jpg");
                    if (!out_draw.exists()) break;
                }
                drawCircleOnImageAndSave(circle, out_draw, (int) Math.round(small_contour_center.x), (int) Math.round(small_contour_center.y), (int) Math.round(small_contour_radius));
            }
            small_good = true;
        } else {
            small_good = false;
        }
        if (large_contour_radius > min_radius && large_contour_radius < max_radius) {
            if (large_contour_radius <=  small_contour_radius || !(small_contour_radius > min_radius && small_contour_radius < max_radius)) {
                retMeasurements.add(large_contour_center.x);
                retMeasurements.add(large_contour_center.y);
                retMeasurements.add(large_contour_radius);
                retMeasurements.add(-1.);
                File out_draw;
                for (int j = 0;; j++) {
                    out_draw = new File(measurementDirectory + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + bar_num + "\\", "Hole_" + j + "_draw" + ".jpg");
                    if (!out_draw.exists()) break;
                }
                drawCircleOnImageAndSave(circle, out_draw, (int) Math.round(small_contour_center.x), (int) Math.round(small_contour_center.y), (int) Math.round(small_contour_radius));
            }
            large_good = true;
        } else {
            large_good = false;
        }
        if (!(small_good || large_good)) {
            retMeasurements.add(-1.);
            retMeasurements.add(-1.);
            retMeasurements.add(-1.);
            retMeasurements.add(-1.);
        }
        System.out.println("Number of measurements: " + retMeasurements.size());
        return retMeasurements;
    }    

    
    private ArrayList<Integer> findWhitePixel(Mat img_in, int abs_x, int abs_y) {
        Mat window = new Mat();
        img_in.copyTo(window);
        ArrayList<Integer> coord = new ArrayList<>();
        int count = 0;
        int width = window.width();
        int height = window.height();
        int x = 0;
        int y = 0;
        while (org.opencv.core.Core.countNonZero(window) > 1) {
            width = window.width();
            height = window.height();
            System.out.println("Width, Height = " + width + ", " + height);
            // Shrink the window
            switch (count % 4) {
                case 0:
                    if (width != 1) {
                        window = new Mat(window, new Rect(0, 0, width - 1, height));
                    }
                    break;
                case 1:
                    if (height != 1) {
                        window = new Mat(window, new Rect(0, 0, width, height - 1));
                    }
                    break;
                case 2:
                    if (width != 1) {
                        window = new Mat(window, new Rect(1, 0, width - 1, height));
                        x++;
                    }
                    break;
                case 4:
                    if (height != 1) {
                        window = new Mat(window, new Rect(0, 1, width, height - 1));
                        y++;
                    }
                    break;
            }
            count++;
        }
        // If we end up with no white pixels, reverse the previous move
        if (org.opencv.core.Core.countNonZero(window) == 0) {
            count--;
            switch (count % 4) {
                case 0:
                    window = new Mat(img_in, new Rect(x, y, width, height));
                    break;
                case 1:
                    window = new Mat(img_in, new Rect(x, y, width, height));
                    break;
                case 2:
                    window = new Mat(img_in, new Rect(--x, y, width + 1, height));
                    break;
                case 4:
                    window = new Mat(img_in, new Rect(x, --y, width, height + 1));
                    break;
            }
        }
        width = window.width();
        height = window.height();

        for (x = 0; x < width; x++) {
            for (y = 0; y < height; y++) {
                if (window.get(y, x)[0] == 255.) {
                    coord.add(abs_x + x + 4);
                    coord.add(abs_y + y);
                }
            }
        }
        return coord;
    }
    
    private ArrayList<Double> fitCircleSimple(Mat circle, Setting setting, int xOff, int yOff, int bar_num) {
//        System.out.println("Fitting circle with setting: " + setting.toString());
        ArrayList<Double> retMeasurements = new ArrayList<>(4);
        // Make an edge image of the circle
        Mat blurred = new Mat(circle.width(), circle.height(), circle.type());
        Imgproc.GaussianBlur(circle, blurred, setting.kernalSize,setting.gaussianSigmaX, setting.gaussianSigmaY);
        Mat edges = new Mat(blurred.width(), blurred.height(), blurred.type());
        Imgproc.Canny(blurred, edges, setting.cannyLowThresh, setting.cannyHighThresh);
        
        // Find a radius for the circle
        double average_center_x = 0;
	double average_center_y = 0;
	double average_radius = 0;
	int h = edges.height();
        int w = edges.width();
	int prev_x_step = 0;
        int prev_y_step = 0;
	int counts = 0;
        int samples = 2;
        for (int n = 0; n < samples; n++) {
//                System.out.println("Sample number: " + n);
                // Start in the center of the circle
		int y = h / 2;
		int x = w / 2;
                double x_step_double = 1. - (double) n / (samples - 1);
		double y_step_double = (double) n / (samples - 1);
//                System.out.println("Computed (x_step, y_step): (" + x_step_double + ", " + y_step_double + ")");
		double min_step = (x_step_double < y_step_double ? x_step_double : y_step_double);
                double scaling = 0;
		if (min_step != 0) {
			scaling = 1/min_step;
                } else {
			scaling = 1;
                }
		int x_step = (int) Math.round(x_step_double * scaling);
		int y_step = (int) Math.round(y_step_double * scaling);
//		System.out.println("Scaled: (" + x_step + "," + y_step + ")");
		if ((x_step == prev_x_step) && (y_step == prev_y_step)) {
                    continue;
                } else {
                    prev_x_step = x_step;
                    prev_y_step = y_step;
                }
                
                ArrayList<Integer> white_pixel_coord = new ArrayList<>();
                
		while (true) {
			x += x_step;
			y += y_step;
                        // If the boundary of the image was passed, stop the loop
			if (x >= w || y >= h || x < 0 || y < 0) {
//				System.out.println("Out of bounds: (" + x + "," + y + ")");
				break;
                        }
			// Look in the region just passed for white pixels
                        Rect window_box = new Rect(x - x_step, y - y_step, x_step + 1, y_step + 1);
                        Mat window = new Mat(edges, window_box);
                        // If a white pixel was passed, stop the loop
			if (org.opencv.core.Core.countNonZero(window) != 0) {
                                white_pixel_coord = findWhitePixel(window, x - x_step, y - y_step);
                                System.out.println("Found white pixel at (" + white_pixel_coord.get(0) + ", " + white_pixel_coord.get(1) +")");
				break;
                        }
                }
		if (x >= w || y >= h || x < 0 || y < 0) {
			continue;
                }
                                
		int right = x - x_step / 2;
		int bottom = y - y_step / 2;

                right = white_pixel_coord.get(0);
                bottom = white_pixel_coord.get(1);

		y = h / 2;
		x = w / 2;
                while (true) {
			x -= x_step;
			y -= y_step;
                        // If the boundary of the image was passed, stop the loop
			if (x >= w || y >= h || x < 0 || y < 0) {
//				System.out.println("Out of bounds: (" + x + "," + y + ")");
				break;
                        }
			// Look in the region just passed for white pixels
                        Rect window_box = new Rect(x, y, x_step + 1, y_step + 1);
                        Mat window = new Mat(edges, window_box);
                        // If a white pixel was passed, stop the loop
			if (org.opencv.core.Core.countNonZero(window) != 0) {
                                white_pixel_coord = findWhitePixel(window, x, y);
                                System.out.println("Found white pixel at (" + white_pixel_coord.get(0) + ", " + white_pixel_coord.get(1) +")");
				break;
                        }
                }
                
		if (x >= w || y >= h || x < 0 || y < 0) {
			continue;
                }
                
		int left = x + x_step / 2;
		int top = y + y_step / 2;

                left = white_pixel_coord.get(0);
                top = white_pixel_coord.get(1);
                
                System.out.println("x: (" + left + ", " + right + ") y: (" + top + ", " + bottom + ")");
                double center_x = (right + left) / 2;
		double center_y = (top + bottom) / 2;
		average_center_x += center_x;
		average_center_y += center_y;

		double radius = Math.sqrt(Math.pow(right - center_x, 2) + Math.pow(top - center_y, 2));
//		System.out.println("Radius: " + radius);
		average_radius += radius;
		counts += 1;
        }
	if (counts == 0) {
//            System.out.println("No circles found in bar!");
            retMeasurements.add(-1.);
            retMeasurements.add(-1.);
            retMeasurements.add(-1.);
            retMeasurements.add(-1.);
            return retMeasurements;
        }
	average_center_x = average_center_x / counts;
	average_center_y = average_center_y / counts;
	average_radius /= counts;
        
        System.out.println("Found circle with center (" + average_center_x + ", " + average_center_y + ") and radius " + average_radius);
        
        retMeasurements.add(average_center_x + xOff);
        retMeasurements.add(average_center_y + yOff);
        retMeasurements.add(average_radius);
        retMeasurements.add(-1.);
        
        File out;
        File out_draw;
        for (int j = 0;; j++) {
            out = new File(measurementDirectory + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + bar_num + "\\", "Hole_" + j + "_edges" + ".jpg");
            if (!out.exists()) break;
        }
        for (int j = 0;; j++) {
            out_draw = new File(measurementDirectory + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + bar_num + "\\", "Hole_" + j + "_draw" + ".jpg");
            if (!out_draw.exists()) break;
        }
        drawCircleOnImageAndSave(circle, out_draw, (int) Math.round(average_center_x), (int) Math.round(average_center_y), (int) Math.round(average_radius));
        imwrite(out.toString(), edges);
        // Print the found circle onto the original image and save the image to disk
        return retMeasurements;
    }
    
    private ArrayList<Double> fitSquare(Mat square, Setting setting, int xOff, int yOff, int bar_num) {
//        System.out.println("Fitting square with setting: " + setting.toString());
        ArrayList<Double> retMeasurements = new ArrayList<>(4);
        Mat i = new Mat(square.cols(),square.rows(),square.type());
        Imgproc.GaussianBlur(square, i, setting.kernalSize,setting.gaussianSigmaX, setting.gaussianSigmaY);
        Mat edges = new Mat(i.width(),i.height(),i.type());
        Imgproc.Canny(i, edges, setting.cannyLowThresh, setting.cannyHighThresh);
     
        BufferedImage img = CV.matToBufferedImage(edges,null);
        BufferedImage imgRGB = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        
        int midX = img.getWidth()/2;
        int midY = img.getHeight()/2;
        int minRight = 10000, minLeft = 0, minTop = 0, minBottom = 10000;
        for (int k = midY - 50; k < midY + 50; k++) {
            for (int j = midX; j < edges.cols(); j++) {
                int b = (img.getRGB(j,k) & 0xff) >> 7;
                if (b == 1) {
                    if (j < minRight) minRight = j;
                    break;
                } else if (b == 0) {

                } else {
                    System.out.println(b);
                }
            }
        }
        for (int k = midY - 50; k < midY + 50; k++) {
            for (int j = midX; j > 0; j--) {
                int b = (img.getRGB(j,k) & 0xff) >> 7;
                if (b == 1) {
                    if (j > minLeft) minLeft = j;
                    break;
                } else if (b == 0) {

                } else {
                    System.out.println(b);
                }
            }
        }
        for (int j = midX - 50; j < midX + 50; j++) {
            for (int k = midY; k < edges.rows(); k++) {
                int b = (img.getRGB(j,k) & 0xff) >> 7;
                if (b == 1) {
                    if (k < minBottom) minBottom = k;
                    break;
                } else if (b == 0) {

                } else {
                    System.out.println(b);
                }
            }
        }
        for (int j = midX - 50; j < midX + 50; j++) {
            for (int k = midY; k > 0; k--) {
                int b = (img.getRGB(j,k) & 0xff) >> 7;
                if (b == 1) {
                    if (k > minTop) minTop = k;
                    break;
                } else if (b == 0) {

                } else {
                    System.out.println(b);
                }
            }
        }
        int width = minRight - minLeft;
        int height = minBottom - minTop;
        if (minLeft + width/2 < 1000) {
            retMeasurements.add((double) minLeft + width/2 + xOff);
        } else {
            retMeasurements.add(-1.);
        }
        if (minTop + height/2 < 1000) {
            retMeasurements.add((double) minTop + height/2 + yOff);
        } else {
            retMeasurements.add(-1.);
        }
        if (width < 1000) {
            retMeasurements.add((double) width);
        } else {
            retMeasurements.add(-1.);
        }
        if (height < 1000) {
            retMeasurements.add((double) height);
        } else {
            retMeasurements.add(-1.);
        }
        
        File out;
        File out_draw;
        for (int j = 0;; j++) {
            out = new File(measurementDirectory + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + bar_num + "\\", "Hole_" + j + "_edges" + ".jpg");
            if (!out.exists()) break;
        }
        for (int j = 0;; j++) {
            out_draw = new File(measurementDirectory + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + bar_num + "\\", "Hole_" + j + "_draw" + ".jpg");
            if (!out_draw.exists()) break;
        }
        drawRectangleOnImageAndSave(square, out_draw, new Rectangle2D.Double(minLeft, minTop, width, height));
//        System.out.println("Chose file " + out_draw.toString());
        imwrite(out.toString(), edges);
        // Print the found rectangle over the image and save it to disk
        return retMeasurements;
    }
    
    private void drawRectangleOnImageAndSave(Mat img_in, File out_file, Rectangle2D.Double rect) {
        BufferedImage img = CV.matToBufferedImage(img_in, null);
        BufferedImage imgRGB = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        imgRGB.getGraphics().drawImage(img, 0, 0, null);
        Graphics2D g = imgRGB.createGraphics();
        g.setColor(Color.red);
        g.setStroke(new BasicStroke(1));
        g.draw(rect);
        g.dispose();
        try {
            ImageIO.write(imgRGB, "jpg", out_file);
        } catch(Exception e) {
            System.out.println(e);
        }
    }
    
    private void drawCircleOnImageAndSave(Mat img_in, File out_file, int center_x, int center_y, int radius) {
        BufferedImage img = CV.matToBufferedImage(img_in, null);
        BufferedImage imgRGB = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
        imgRGB.getGraphics().drawImage(img, 0, 0, null);
        Graphics2D g = imgRGB.createGraphics();
        g.setColor(Color.red);
        g.setStroke(new BasicStroke(1));
        g.drawOval((int) Math.round(center_x - radius), (int) Math.round(center_y - radius), 2*radius, 2*radius);
        g.dispose();
        try {
            ImageIO.write(imgRGB, "jpg", out_file);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    // TODO: SIFT not implemented...
    private void adjustBarToConfig(Bar b) {
        Mat template_orig = new Mat();
        if (b.isLeft()) {
            // Get and resize the bar image and the template image
            template_orig = configLeft;
        } else {
            template_orig = configRight;
        }
        Mat image_orig = b.getImg();
        
        Mat image = new Mat();
        Mat template = new Mat();
        
        Size resized_image_size = new Size((int) image_orig.cols()/10, (int) image_orig.rows()/10);
        Size resized_template_size = new Size((int) template_orig.cols()/10, (int) template_orig.rows()/10);
        
        Imgproc.resize(image_orig, image, resized_image_size);
        Imgproc.resize(template_orig, template, resized_template_size);

    }
    
    private void L0ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L0ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 0;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(0));
        previewChange();
    }//GEN-LAST:event_L0ImageMouseClicked

    private void centerThreshStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_centerThreshStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int centThresh = centerThresh.getValue();
            centerThreshValue.setText("" + centThresh);
            previewChange();
        }
    }//GEN-LAST:event_centerThreshStateChanged

    private void maxRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxRadiusStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int maxRad = maxRadius.getValue();
            maxRadiusValue.setText("" + maxRad);
            previewChange();
        }
    }//GEN-LAST:event_maxRadiusStateChanged

    private void minRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minRadiusStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int minRad = minRadius.getValue();
            minRadiusValue.setText("" + minRad);
            previewChange();
        }
    }//GEN-LAST:event_minRadiusStateChanged

    private void centerDistanceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_centerDistanceStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int centDist = centerDistance.getValue();
            centerDistanceValue.setText("" + centDist);
            previewChange();
        }
    }//GEN-LAST:event_centerDistanceStateChanged

    private void tuneCannyLowThreshStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tuneCannyLowThreshStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int lowThresh = source.getValue();
            tuneCannyLowThreshValue.setText("" + lowThresh);
            previewChange();
        }
    }//GEN-LAST:event_tuneCannyLowThreshStateChanged

    private void tuneCannyHighThreshStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tuneCannyHighThreshStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int highThresh = source.getValue();
            tuneCannyHighThreshValue.setText("" + highThresh);
            previewChange();
        }
    }//GEN-LAST:event_tuneCannyHighThreshStateChanged

    private void gaussianKernalSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gaussianKernalSizeStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int size = source.getValue();
            if (size % 2 == 0) {
                size = size + 1;
            }
            source.setValue(size);
            gaussianKernalSizeValue.setText("" + size);
            previewChange();
        }
    }//GEN-LAST:event_gaussianKernalSizeStateChanged

    private void gaussianSigmaXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gaussianSigmaXStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int sigma = source.getValue();
            gaussianSigmaXValue.setText("" + sigma);
            previewChange();
        }
    }//GEN-LAST:event_gaussianSigmaXStateChanged

    private void gaussianSigmaYStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gaussianSigmaYStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int sigma = source.getValue();
            gaussianSigmaYValue.setText("" + sigma);
            previewChange();
        }
    }//GEN-LAST:event_gaussianSigmaYStateChanged

    private void L1ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L1ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 1;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(1));
        previewChange();
    }//GEN-LAST:event_L1ImageMouseClicked

    private void L2ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L2ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 2;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(2));
        previewChange();
    }//GEN-LAST:event_L2ImageMouseClicked

    private void L3ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L3ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 3;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(3));
        previewChange();
    }//GEN-LAST:event_L3ImageMouseClicked

    private void L4ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L4ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 4;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(4));
        previewChange();
    }//GEN-LAST:event_L4ImageMouseClicked

    private void L5ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L5ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 5;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(5));
        previewChange();
    }//GEN-LAST:event_L5ImageMouseClicked

    private void R0ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R0ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 6;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(6));
        previewChange();
    }//GEN-LAST:event_R0ImageMouseClicked

    private void R1ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R1ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 7;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(7));
        previewChange();
    }//GEN-LAST:event_R1ImageMouseClicked

    private void R2ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R2ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 8;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(8));
        previewChange();
    }//GEN-LAST:event_R2ImageMouseClicked

    private void R3ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R3ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 9;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(9));
        
        
        previewChange();
    }//GEN-LAST:event_R3ImageMouseClicked

    private void R4ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R4ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 10;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(10));
        
        
        previewChange();
    }//GEN-LAST:event_R4ImageMouseClicked

    private void R5ImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R5ImageMouseClicked
        // TODO add your handling code here:
        configSelect = 11;
        configurationPanel.setVisible(true);
        setConfigState(configurationSettings.get(11));
        
        
        previewChange();
    }//GEN-LAST:event_R5ImageMouseClicked

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        // TODO add your handling code here:
        debugPrint("Saving current settings for configuration button " + configSelect );
        configurationSettings.put(configSelect, new Setting(tuneCannyHighThresh.getValue(), tuneCannyLowThresh.getValue(), gaussianKernalSize.getValue(), gaussianSigmaX.getValue(), gaussianSigmaY.getValue(), centerDistance.getValue(), centerThresh.getValue(), minRadius.getValue(), maxRadius.getValue()));
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        // TODO add your handling code here:
        configurationPanel.setVisible(false);
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void overlayCircleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overlayCircleCheckBoxActionPerformed
        // TODO add your handling code here:
        previewChange();
    }//GEN-LAST:event_overlayCircleCheckBoxActionPerformed

    private void showOriginalImageCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showOriginalImageCheckBoxActionPerformed
        // TODO add your handling code here:
        previewChange();
    }//GEN-LAST:event_showOriginalImageCheckBoxActionPerformed

    private void saveConfigurationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigurationButtonActionPerformed
        // TODO add your handling code here:
        if (mainDirectory != null && mainDirectory.exists()) {
            File f;
            File fRect;
            if (FGB) {
                f = new File(configDirectory, "ConfigurationFGB.txt");
                fRect = new File(configDirectory, "ConfigurationRectFGB.txt");
            } else {
                f = new File(configDirectory, "ConfigurationSMB.txt");
                fRect = new File(configDirectory, "ConfigurationRectSMB.txt");
            }
            if (f.exists()) {
                // If the measurements file already exists, ask for overwrite
                Object[] options = {"Yes",
                                    "No"};
                int n = JOptionPane.showOptionDialog(null,"A file called \"Configuration" + (FGB ? "FGB" : "SMB") + ".txt\" already exists. Would you like to overwrite this file?",
                    "File Error",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,     //do not use a custom Icon
                    options,  //the titles of buttons
                    options[1]); //default button title

                if (n == 0) {
                    if (FGB) {
                        try (
                            Writer writer = new BufferedWriter(new OutputStreamWriter(
                                    new FileOutputStream(configDirectory.toString() + "\\ConfigurationFGB.txt"), "utf-8"))) {
                            writer.write("Hole\tCanny High Thresh\tKernal Size\tSigma X\tSigma Y\tCenter Distance\tCenter Threshold\tMin Radius\tMax Radius\n");
                            for (int i = 0; i < 12; i++) {
                                writer.write((i < 6 ? "L" : "R") + (i%6) + "\t" + configurationSettings.get(i).toString() + "\n");
                            }
                        } catch (IOException e) {
                            System.out.println(e);
                            debugPrint("FGB Configuration File could not be made");
                        }
                    } else {
                        try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                                    new FileOutputStream(configDirectory.toString() + "\\ConfigurationSMB.txt"), "utf-8"))) {
                            writer.write("Hole\tCanny High Thresh\tKernal Size\tSigma X\tSigma Y\tCenter Distance\tCenter Threshold\tMin Radius\tMax Radius\n");
                            for (int i = 0; i < 12; i++) {
                                writer.write((i < 6 ? "L" : "R") + (i%6) + "\t" + configurationSettings.get(i).toString() + "\n");
                            }
                        } catch (IOException e) {
                            System.out.println(e);
                            debugPrint("FGB Configuration File could not be made");
                        }
                    }
                }
            } else {
                if (FGB) {
                    try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                                new FileOutputStream(configDirectory.toString() + "\\ConfigurationFGB.txt"), "utf-8"))) {
                            writer.write("Hole\tCanny High Thresh\tKernal Size\tSigma X\tSigma Y\tCenter Distance\tCenter Threshold\tMin Radius\tMax Radius\n");
                            for (int i = 0; i < 12; i++) {
                                writer.write((i < 6 ? "L" : "R") + (i%6) + "\t" + configurationSettings.get(i).toString() + "\n");
                            }
                    } catch (IOException e) {
                        System.out.println(e);
                        System.out.println("FGB Configuration File could not be made");
                    }
                } else {
                    try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                                new FileOutputStream(configDirectory.toString() + "\\ConfigurationSMB.txt"), "utf-8"))) {
                            for (int i = 0; i < 12; i++) {
                                writer.write((i < 6 ? "L" : "R") + (i%6) + "\t" + configurationSettings.get(i).toString() + "\n");
                            }
                    } catch (IOException e) {
                        System.out.println(e);
                        debugPrint("FGB Configuration File could not be made");
                    }
                }           
            }
            if (fRect.exists()) {
                // If the measurements file already exists, ask for overwrite
                Object[] options = {"Yes",
                                    "No"};
                int n = JOptionPane.showOptionDialog(null,"A file called \"ConfigurationRect" + (FGB ? "FGB" : "SMB") + ".txt\" already exists. Would you like to overwrite this file?",
                    "File Error",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,     //do not use a custom Icon
                    options,  //the titles of buttons
                    options[1]); //default button title

                if (n == 0) {
                    try (Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(configDirectory.toString()
                            + "\\ConfigurationRect" +(FGB ? "FGB" : "SMB") + ".txt"), "utf-8"))) {
                    debugPrint("Writing configuration file for " + (FGB ? "FGB" : "SMB"));
                    writer.write("Hole\tx\ty\twidth\theight\t\n");
                    // Print out each rectangle used to crop out the holes - dependent on configuration
                    // The first 6 in the list correspond to the left, second six correspond to the right
                    for (int i = 0; i < 12; i++) {
                        Rect r = configurationRects.get(i);
                        writer.write((i < 6 ? "L" : "R") + (i%6) + "\t"+r.x + "\t" + r.y + "\t" +r.width + "\t" +r.height + "\t"  +"\n");
                    }

                    } catch (IOException e) {
                        System.out.println(e);
                        debugPrint((FGB ? "FGB" : "SMB") + "Configuration File could not be made");
                    }
                }
            } else {
                try (Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(configDirectory.toString()
                        + "\\ConfigurationRect" + (FGB ? "FGB" : "SMB") + ".txt"), "utf-8"))) {
                debugPrint("Writing configuration file for " + (FGB ? "FGB" : "SMB"));
                writer.write("Hole\tx\ty\twidth\theight\t\n");
                // Print out each rectangle used to crop out the holes - dependent on configuration
                // The first 6 in the list correspond to the left, second six correspond to the right
                for (int i = 0; i < 12; i++) {
                    Rect r = configurationRects.get(i);
                    writer.write((i < 6 ? "L" : "R") + (i%6) + "\t"+r.x + "\t" + r.y + "\t" +r.width + "\t" +r.height + "\t"  +"\n");
                }

                } catch (IOException e) {
                    System.out.println(e);
                    debugPrint((FGB ? "FGB" : "SMB") + "Configuration File could not be made");
                }    
            }
        } else {
            JOptionPane.showMessageDialog(null,"Please select a valid working directory.");
        }
    }//GEN-LAST:event_saveConfigurationButtonActionPerformed

    private void L0ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_L0ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(0,amountScrolled);
    }//GEN-LAST:event_L0ImageMouseWheelMoved

    private void translateImage(int which, int currX, int currY) {
        String debug = "Scrolling rectangle ";
        Rect currRect = configurationRects.get(which);
        debug += printRect(currRect);
        JLabel label = configurationLabels.get(which);
        int startX = dragParameters[which][0];
        int startY = dragParameters[which][1];
        int initRectX = dragParameters[which][2];
        int initRectY = dragParameters[which][3];
        int diffX = currX - startX;
        int diffY = currY - startY;
        int x = (initRectX - diffX);
        int y = (initRectY - diffY);
        int width = (int)currRect.width;
        int height = (int)currRect.height;
        Mat refImage = (which < 6 ? configLeft : configRight);
        if (!(x < 0 || y < 0 || x + width > refImage.width() || width <= 0 || height <= 0 || y + height > refImage.height())) {
            currRect.x = x;
            currRect.y = y;
            Rect r = new Rect(x,y,width,height);
            Mat i = new Mat(refImage, r);
            configurationRects.put(which, r);
            assignMatToLabel(i,label);
            debug += " into rectangle " + printRect(r);
        }
        debugPrint(debug);
    }
    
    private void scrollImage(int which, int amountScrolled) {
        String debug = "Scrolling rectangle ";
        Rect currRect = configurationRects.get(which);
        debug += printRect(currRect);
        JLabel label = configurationLabels.get(which);
        int x = currRect.x - amountScrolled*scrollScalingFactor/2;
        int y = currRect.y - amountScrolled*scrollScalingFactor/2;
        int width = currRect.width + amountScrolled*scrollScalingFactor;
        int height = currRect.height + amountScrolled*scrollScalingFactor;
        Mat refImage = (which < 6 ? configLeft : configRight);
        if (!(x < 0 || y < 0 || width > refImage.width() || width <= 0 || height <= 0 || height > refImage.height())) {
            currRect.x = x;
            currRect.y = y;
            currRect.width = width;
            currRect.height = height;
            Rect r = new Rect(x,y,width,height);
            Mat i = new Mat(refImage,r);
            configurationRects.put(which,r);
            assignMatToLabel(i,label);
            debug += " into rectangle " + printRect(r);
        }
        debugPrint(debug);
    }
    
    private String printRect(Rect r) {
        return "[" + r.x + ", " + r.y + ", " + r.width + ", " + r.height + "]";
    }
    
    private void L0ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L0ImageMouseDragged
        // TODO add your handling code here:
        translateImage(0,evt.getX(),evt.getY());
    }//GEN-LAST:event_L0ImageMouseDragged
    
    private void L0ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L0ImageMousePressed
        // TODO add your handling code here:
        dragParameters[0][0] = evt.getX();
        dragParameters[0][1] = evt.getY();
        dragParameters[0][2] = configurationRects.get(0).x;
        dragParameters[0][3] = configurationRects.get(0).y;
    }//GEN-LAST:event_L0ImageMousePressed

    private void L1ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L1ImageMousePressed
        // TODO add your handling code here:
        dragParameters[1][0] = evt.getX();
        dragParameters[1][1] = evt.getY();
        dragParameters[1][2] = configurationRects.get(1).x;
        dragParameters[1][3] = configurationRects.get(1).y;
    }//GEN-LAST:event_L1ImageMousePressed

    private void L2ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L2ImageMousePressed
        // TODO add your handling code here:
        dragParameters[2][0] = evt.getX();
        dragParameters[2][1] = evt.getY();
        dragParameters[2][2] = configurationRects.get(2).x;
        dragParameters[2][3] = configurationRects.get(2).y;
    }//GEN-LAST:event_L2ImageMousePressed

    private void L3ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L3ImageMousePressed
        // TODO add your handling code here:
        dragParameters[3][0] = evt.getX();
        dragParameters[3][1] = evt.getY();
        dragParameters[3][2] = configurationRects.get(3).x;
        dragParameters[3][3] = configurationRects.get(3).y;
    }//GEN-LAST:event_L3ImageMousePressed

    private void L4ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L4ImageMousePressed
        // TODO add your handling code here:
        dragParameters[4][0] = evt.getX();
        dragParameters[4][1] = evt.getY();
        dragParameters[4][2] = configurationRects.get(4).x;
        dragParameters[4][3] = configurationRects.get(4).y;
    }//GEN-LAST:event_L4ImageMousePressed

    private void L5ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L5ImageMousePressed
        // TODO add your handling code here:
        dragParameters[5][0] = evt.getX();
        dragParameters[5][1] = evt.getY();
        dragParameters[5][2] = configurationRects.get(5).x;
        dragParameters[5][3] = configurationRects.get(5).y;
    }//GEN-LAST:event_L5ImageMousePressed

    private void R0ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R0ImageMousePressed
        // TODO add your handling code here:
        dragParameters[6][0] = evt.getX();
        dragParameters[6][1] = evt.getY();
        dragParameters[6][2] = configurationRects.get(6).x;
        dragParameters[6][3] = configurationRects.get(6).y;
    }//GEN-LAST:event_R0ImageMousePressed

    private void R1ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R1ImageMousePressed
        // TODO add your handling code here:
        dragParameters[7][0] = evt.getX();
        dragParameters[7][1] = evt.getY();
        dragParameters[7][2] = configurationRects.get(7).x;
        dragParameters[7][3] = configurationRects.get(7).y;
    }//GEN-LAST:event_R1ImageMousePressed

    private void R2ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R2ImageMousePressed
        // TODO add your handling code here:
        dragParameters[8][0] = evt.getX();
        dragParameters[8][1] = evt.getY();
        dragParameters[8][2] = configurationRects.get(8).x;
        dragParameters[8][3] = configurationRects.get(8).y;
    }//GEN-LAST:event_R2ImageMousePressed

    private void R3ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R3ImageMousePressed
        // TODO add your handling code here:
        dragParameters[9][0] = evt.getX();
        dragParameters[9][1] = evt.getY();
        dragParameters[9][2] = configurationRects.get(9).x;
        dragParameters[9][3] = configurationRects.get(9).y;
    }//GEN-LAST:event_R3ImageMousePressed

    private void R4ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R4ImageMousePressed
        // TODO add your handling code here:
        dragParameters[10][0] = evt.getX();
        dragParameters[10][1] = evt.getY();
        dragParameters[10][2] = configurationRects.get(10).x;
        dragParameters[10][3] = configurationRects.get(10).y;
    }//GEN-LAST:event_R4ImageMousePressed

    private void R5ImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R5ImageMousePressed
        // TODO add your handling code here:
        dragParameters[11][0] = evt.getX();
        dragParameters[11][1] = evt.getY();
        dragParameters[11][2] = configurationRects.get(11).x;
        dragParameters[11][3] = configurationRects.get(11).y;
    }//GEN-LAST:event_R5ImageMousePressed

    private void L1ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L1ImageMouseDragged
        // TODO add your handling code here:
        translateImage(1,evt.getX(),evt.getY());
    }//GEN-LAST:event_L1ImageMouseDragged

    private void L2ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L2ImageMouseDragged
        // TODO add your handling code here:
        translateImage(2,evt.getX(),evt.getY());
    }//GEN-LAST:event_L2ImageMouseDragged

    private void L3ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L3ImageMouseDragged
        // TODO add your handling code here:
        translateImage(3,evt.getX(),evt.getY());
    }//GEN-LAST:event_L3ImageMouseDragged

    private void L4ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L4ImageMouseDragged
        // TODO add your handling code here:
        translateImage(4,evt.getX(),evt.getY());
    }//GEN-LAST:event_L4ImageMouseDragged

    private void L5ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_L5ImageMouseDragged
        // TODO add your handling code here:
        translateImage(5,evt.getX(),evt.getY());
    }//GEN-LAST:event_L5ImageMouseDragged

    private void R0ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R0ImageMouseDragged
        // TODO add your handling code here:
        translateImage(6,evt.getX(),evt.getY());
    }//GEN-LAST:event_R0ImageMouseDragged

    private void R1ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R1ImageMouseDragged
        // TODO add your handling code here:
        translateImage(7,evt.getX(),evt.getY());
    }//GEN-LAST:event_R1ImageMouseDragged

    private void R2ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R2ImageMouseDragged
        // TODO add your handling code here:
        translateImage(8,evt.getX(),evt.getY());
    }//GEN-LAST:event_R2ImageMouseDragged

    private void R3ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R3ImageMouseDragged
        // TODO add your handling code here:
        translateImage(9,evt.getX(),evt.getY());
    }//GEN-LAST:event_R3ImageMouseDragged

    private void R4ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R4ImageMouseDragged
        // TODO add your handling code here:
        translateImage(10,evt.getX(),evt.getY());
    }//GEN-LAST:event_R4ImageMouseDragged

    private void R5ImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_R5ImageMouseDragged
        // TODO add your handling code here:
        translateImage(11,evt.getX(),evt.getY());
    }//GEN-LAST:event_R5ImageMouseDragged

    private void L1ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_L1ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(1,amountScrolled);
    }//GEN-LAST:event_L1ImageMouseWheelMoved

    private void L2ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_L2ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(2,amountScrolled);
    }//GEN-LAST:event_L2ImageMouseWheelMoved

    private void L3ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_L3ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(3,amountScrolled);
    }//GEN-LAST:event_L3ImageMouseWheelMoved

    private void L4ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_L4ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(4,amountScrolled);
    }//GEN-LAST:event_L4ImageMouseWheelMoved

    private void L5ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_L5ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(5,amountScrolled);
    }//GEN-LAST:event_L5ImageMouseWheelMoved

    private void R0ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_R0ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(6,amountScrolled);
    }//GEN-LAST:event_R0ImageMouseWheelMoved

    private void R1ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_R1ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(7,amountScrolled);
    }//GEN-LAST:event_R1ImageMouseWheelMoved

    private void R2ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_R2ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(8,amountScrolled);
    }//GEN-LAST:event_R2ImageMouseWheelMoved

    private void R3ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_R3ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(9,amountScrolled);
    }//GEN-LAST:event_R3ImageMouseWheelMoved

    private void R4ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_R4ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(10,amountScrolled);
    }//GEN-LAST:event_R4ImageMouseWheelMoved

    private void R5ImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_R5ImageMouseWheelMoved
        // TODO add your handling code here:
        int amountScrolled = evt.getUnitsToScroll();
        scrollImage(11,amountScrolled);
    }//GEN-LAST:event_R5ImageMouseWheelMoved

    private void saveConfigurationImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigurationImagesButtonActionPerformed
        // TODO add your handling code here:
        makeConfigurationRectFile();
        //splitConfigPicture();
    }//GEN-LAST:event_saveConfigurationImagesButtonActionPerformed

    private void overlayRectangleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overlayRectangleCheckBoxActionPerformed
        // TODO add your handling code here:
        previewChange();
    }//GEN-LAST:event_overlayRectangleCheckBoxActionPerformed

    private void Left1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left1ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left1.getText());
            barNumbers.put(0,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left1ActionPerformed

    private void Left2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left2ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left2.getText());
            barNumbers.put(1,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left2ActionPerformed

    private void Left3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left3ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left3.getText());
            barNumbers.put(2,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left3ActionPerformed

    private void Left4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left4ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left4.getText());
            barNumbers.put(3,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left4ActionPerformed

    private void Left5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left5ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left5.getText());
            barNumbers.put(4,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left5ActionPerformed

    private void Left6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left6ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left6.getText());
            barNumbers.put(5,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left6ActionPerformed

    private void Left7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left7ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left7.getText());
            barNumbers.put(6,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left7ActionPerformed

    private void Left8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left8ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left8.getText());
            barNumbers.put(7,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left8ActionPerformed

    private void Left9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left9ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left9.getText());
            barNumbers.put(8,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left9ActionPerformed

    private void Left10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left10ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left10.getText());
            barNumbers.put(9,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left10ActionPerformed

    private void Left11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Left11ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Left11.getText());
            barNumbers.put(10,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Left11ActionPerformed

    private void Right1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right1ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right1.getText());
            barNumbers.put(11,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right1ActionPerformed

    private void Right2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right2ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right2.getText());
            barNumbers.put(12,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right2ActionPerformed

    private void Right3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right3ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right3.getText());
            barNumbers.put(13,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right3ActionPerformed

    private void Right4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right4ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right4.getText());
            barNumbers.put(14,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right4ActionPerformed

    private void Right5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right5ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right5.getText());
            barNumbers.put(15,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right5ActionPerformed

    private void Right6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right6ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right6.getText());
            barNumbers.put(16,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right6ActionPerformed

    private void Right7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right7ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right7.getText());
            barNumbers.put(17,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right7ActionPerformed

    private void Right8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right8ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right8.getText());
            barNumbers.put(18,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right8ActionPerformed

    private void Right9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right9ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right9.getText());
            barNumbers.put(19,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right9ActionPerformed

    private void Right10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right10ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right10.getText());
            barNumbers.put(20,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right10ActionPerformed

    private void Right11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Right11ActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        try {
            int i = Integer.parseInt(Right11.getText());
            barNumbers.put(21,i);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: Invalid text (make sure it's an integer!) or no text entered.");
        }
    }//GEN-LAST:event_Right11ActionPerformed

    private void measureNewImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_measureNewImageButtonActionPerformed
        // TODO add your handling code here:
        Set<String> newFiles = new HashSet<>();
        newFiles.addAll(Arrays.asList(imageDirectory.list()));
        newFiles.removeAll(imageDirectoryContents);
        for (String s : newFiles) {
            System.out.println("Reading file " + s);
            File f = new File(imageDirectory,s);
            try {
                if (Files.probeContentType(f.toPath()).contains("image")) {
                    directoryChangeAction(s);
                    // If bar numbers were not entered or there was an error printing the measurements, then this image
                    // Should be rescanned
                    if (bar_numbers_not_entered || print_measurement_error) {
                        newFiles.remove(s);
                        if (print_measurement_error) {
                            debugPrint("Could not write to measurements file! Make sure the measurement file is not in use elsewhere.");
                        }
                        bar_numbers_not_entered = false;
                        print_measurement_error = false;
                    }
                }
            } catch (IOException e) {
                debugPrint("New image file was invalid.");
            }
        }
        imageDirectoryContents.addAll(newFiles);
    }//GEN-LAST:event_measureNewImageButtonActionPerformed

    private void PPITextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PPITextFieldActionPerformed
        // TODO add your handling code here:
        try {
            PPI = Integer.parseInt(PPITextField.getText());
            if (PPI < 0) {
                debugPrint("Error entering PPI. Enter a positive integer.");
                PPI = 2400;
                PPITextField.setText(""+PPI);
            }
        } catch (NumberFormatException e) {
            debugPrint("Error entering PPI. Enter a positive integer.");
            PPI = 2400;
            PPITextField.setText(""+PPI);
        }
    }//GEN-LAST:event_PPITextFieldActionPerformed

    private void fillNumbersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillNumbersButtonActionPerformed
        // TODO add your handling code here:
        debugPrint("Updating Bar Numbers.");
        for (int i = 0; i < 22; i++) {
            debugPrint("Updating Bar Numbers.");
            barNumbers.put(i, i);
            barNumberTextFields.get(i).setText("" + i);
        }
    }//GEN-LAST:event_fillNumbersButtonActionPerformed

    public ArrayList<Mat> splitBarIntoHoles(Bar b) {
        ArrayList<Mat> retArr = new ArrayList<>();
        Mat sub;
        int offset = (b.isLeft() ? 0 : 6);
        for (int i = 0; i < 6; i++) {
            Rect r = configurationRects.get(i + offset);
            sub = new Mat(b.getImg(),r);
            /*
            if (i == 0) {
                JFrame newFrame = new JFrame();
                newFrame.setSize(400,400);
                JLabel label = new JLabel();
                label.setSize(300, 300);
                newFrame.add(label);
                assignMatToLabel(sub,label);
                newFrame.setVisible(true);            
                debug += printRect(r) + " ";

            }
            */
            retArr.add(sub);
            
            int barNum = b.getBarNum();
            File barHoleDir = new File(measurementDirectory, "\\BarHoles\\");
            if (!barHoleDir.exists()) {
                barHoleDir.mkdir();
            }
            File barNumDir = new File(measurementDirectory.toString() + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + barNum + "\\");
            if (!barNumDir.exists()) {
                barNumDir.mkdir();
            }
            File f = new File(measurementDirectory.toString() + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + barNum + "\\", "Hole_" + i + ".jpg");
            if (f.exists()) {
                debugPrint("Warning: A bar was already measured with bar number " + barNum);
                for (int j = 1;;j++) {
                    f = new File(measurementDirectory + "\\BarHoles\\" + (FGB ? "FGB" : "SMB") + "_" + barNum + "\\", "Hole_" + i + " ("+j+").jpg");
                    if (!f.exists()) break;
                }
            }
            try {
                MatOfInt params = new MatOfInt(CV_IMWRITE_JPEG_QUALITY,50);
                imwrite(f.toString(), sub, params);
            } catch (CvException ex) {
                debugPrint("Could not write sub image to file.");
                debugPrint(ex.getMessage());
            }

            
        }
        return retArr;
    }
    
    public void splitConfigPicture() {
        if (!(FGB || SMB)) {
            JOptionPane.showMessageDialog(null, "Error: Select either Fiber Guide Bar or SiPM Mounting Block in the main menu.");
            return;
        }
        if (configImage != null) {
            System.out.println("Width: " + configImage.width() + " Height: " + configImage.height() + " Type: " + configImage.type() + " Gray: " + BufferedImage.TYPE_BYTE_GRAY);
            configLeft = new Mat(configImage, largeImageCropRects.get(0));
            configRight = new Mat(configImage, largeImageCropRects.get(11));

            for (int i = 0; i < 12; i++) {
                Mat im;
                if (i < 6) {
                    im = new Mat(configLeft,configurationRects.get(i));
                } else {
                    im = new Mat(configRight,configurationRects.get(i));
                }
                assignMatToLabel(im,configurationLabels.get(i));
            }
            /*
            if (SMB) {         
                File f = new File(System.getProperty("user.dir") + "\\src\\Frame004.jpg");
                directoryChangeAction(f);
            }
            */
        } else {
            System.out.println("Config Picture is null!");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScannerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScannerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScannerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScannerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ScannerUI().setVisible(true);
                System.out.println("Test");
            }
        });
             
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L0Image;
    private javax.swing.JLabel L1Image;
    private javax.swing.JLabel L2Image;
    private javax.swing.JLabel L3Image;
    private javax.swing.JLabel L4Image;
    private javax.swing.JLabel L5Image;
    private javax.swing.JTextField Left1;
    private javax.swing.JTextField Left10;
    private javax.swing.JTextField Left11;
    private javax.swing.JTextField Left2;
    private javax.swing.JTextField Left3;
    private javax.swing.JTextField Left4;
    private javax.swing.JTextField Left5;
    private javax.swing.JTextField Left6;
    private javax.swing.JTextField Left7;
    private javax.swing.JTextField Left8;
    private javax.swing.JTextField Left9;
    private javax.swing.JTextField PPITextField;
    private javax.swing.JLabel R0Image;
    private javax.swing.JLabel R1Image;
    private javax.swing.JLabel R2Image;
    private javax.swing.JLabel R3Image;
    private javax.swing.JLabel R4Image;
    private javax.swing.JLabel R5Image;
    private javax.swing.JTextField Right1;
    private javax.swing.JTextField Right10;
    private javax.swing.JTextField Right11;
    private javax.swing.JTextField Right2;
    private javax.swing.JTextField Right3;
    private javax.swing.JTextField Right4;
    private javax.swing.JTextField Right5;
    private javax.swing.JTextField Right6;
    private javax.swing.JTextField Right7;
    private javax.swing.JTextField Right8;
    private javax.swing.JTextField Right9;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonSave;
    private javax.swing.JPanel cannyEdgeParameters;
    private javax.swing.JSlider centerDistance;
    private javax.swing.JLabel centerDistanceValue;
    private javax.swing.JSlider centerThresh;
    private javax.swing.JLabel centerThreshValue;
    private javax.swing.JPanel circleDetectionParameters;
    private javax.swing.JFrame configurationPanel;
    private javax.swing.JLabel currConfigPictureText;
    private javax.swing.JLabel currDirText;
    private javax.swing.JTextArea debugLogTextArea;
    private javax.swing.JPanel edgeDetectionParameters;
    private javax.swing.JButton fillNumbersButton;
    private javax.swing.JSlider gaussianKernalSize;
    private javax.swing.JLabel gaussianKernalSizeValue;
    private javax.swing.JSlider gaussianSigmaX;
    private javax.swing.JLabel gaussianSigmaXValue;
    private javax.swing.JSlider gaussianSigmaY;
    private javax.swing.JLabel gaussianSigmaYValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel leftText;
    private javax.swing.JSlider maxRadius;
    private javax.swing.JLabel maxRadiusValue;
    private javax.swing.JButton measureNewImageButton;
    private javax.swing.JSlider minRadius;
    private javax.swing.JLabel minRadiusValue;
    private javax.swing.JCheckBox overlayCircleCheckBox;
    private javax.swing.JCheckBox overlayRectangleCheckBox;
    private javax.swing.JLabel previewImage;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JLabel rightText;
    private javax.swing.JButton saveConfigurationButton;
    private javax.swing.JButton saveConfigurationImagesButton;
    private javax.swing.ButtonGroup selectBarType;
    private javax.swing.JButton selectConfigPicButton;
    private javax.swing.JButton selectDirectoryButton;
    private javax.swing.JRadioButton selectFGB;
    private javax.swing.JRadioButton selectSMB;
    private javax.swing.JCheckBox showOriginalImageCheckBox;
    private javax.swing.JSlider tuneCannyHighThresh;
    private javax.swing.JLabel tuneCannyHighThreshValue;
    private javax.swing.JSlider tuneCannyLowThresh;
    private javax.swing.JLabel tuneCannyLowThreshValue;
    // End of variables declaration//GEN-END:variables

    public JTextArea getDebugLogTextArea() {
        return debugLogTextArea;
    }
}
